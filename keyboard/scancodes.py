# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		scancodes.py
#		Purpose :	Generate PS/2 tables etc (II)
#		Date :		6th August 2022
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import re 

# *******************************************************************************************
#
#		What we want is a table that maps PS/2 keycodes 00-7F onto SDL Key Codes (SDLK_)
#
#		The program then inverses this and uses it to generate a SDL Key code => PS/2 Keycode
#		table
#
# *******************************************************************************************

# *******************************************************************************************
#
#							This is scan code, unshifted, shifted data
#
# *******************************************************************************************

rawPS2data = """
16/F0 16||1||!
1E/F0 1E||2||@
26/F0 26||3||#
25/F0 25||4||$
2E/F0 2E||5||%
36/F0 36||6||^
3D/F0 3D||7||&
3E/F0 3E||8||*
46/F0 46||9||(
45/F0 45||0||)
4E/F0 4E||-||_
55/F0 55||=||+
66/F0 66||Backspace||
0D/F0 0D||Tab||
15/F0 15||q||Q
1D/F0 1D||w||W
24/F0 24||e||E
2D/F0 2D||r||R
2C/F0 2C||t||T
35/F0 35||y||Y
3C/F0 3C||u||U
43/F0 43||i||I
44/F0 44||o||O
4D/F0 4D||p||P
54/F0 54||[||{
5B/F0 5B||]||}
1C/F0 1C||a||A
1B/F0 1B||s||S
23/F0 23||d||D
2B/F0 2B||f||F
34/F0 34||g||G
33/F0 33||h||H
3B/F0 3B||j||J
42/F0 42||k||K
4B/F0 4B||l||L
4C/F0 4C||;||:
52/F0 52||'||"
5A/F0 5A||Enter||
12/F0 12||Left Shift||
1A/F0 1A||z||Z
22/F0 22||x||X
21/F0 21||c||C
2A/F0 2A||v||V
32/F0 32||b||B
31/F0 31||n||N
3A/F0 3A||m||M
41/F0 41||,||<
49/F0 49||.||>
4A/F0 4A||/||?
59/F0 59||Right Shift||
14/F0 14||Left Ctrl||
11/F0 11||Left Alt||
29/F0 29||Space||
76/F0 76||Esc||
5D/F0 5D||\\||
"""

fixupTable = []
highCode = 0 
codes = {}

for s in rawPS2data.strip().split("\n"):
	m = re.match("^([0-9A-F]+).*?\\|\\|(.*?)\\|\\|(.*?)$",s)
	assert m is not None,"Bad line "+s
	key = m.group(2)
	keyCode = ord(m.group(2)[0])
	shiftKey = ord(m.group(3)[0]) if m.group(3) != "" else 0
	scanCode = int(m.group(1),16)
	highCode = max(highCode,scanCode)
	if len(key) > 1:
		keyCode = 0
		shiftKey = 0
		if key == "Backspace":
			keyCode = 8
		if key == "Tab":
			keyCode = 9
		if key == "Enter":
			keyCode = 13
		if key == "Space":
			keyCode = 32
		if key == "Esc":
			keyCode = 76
	if shiftKey != 0:
		if (keyCode ^ shiftKey) != 32:
			fixupTable.append(keyCode)
			fixupTable.append(shiftKey)
	else:
		if keyCode != 0:
			keyCode |= 0x80

	codes[scanCode] = { "char":m.group(2),"code":m.group(3),"keycode":keyCode }

print(";\n;\t This file is automatically generated.\n;")
print("ASCIIFromScanCode:")
for i in range(0,144):
	print("\t.byte\t${0:02x} ; {1} {2}".format(codes[i]["keycode"] if i in codes else 0x00,i,codes[i]["char"] if i in codes else ""))
print("\t.byte\t$FF\n")	
print("ShiftFixTable:\n")
for c in fixupTable:
	print("\t.byte\t${1:02x} ; \"{0}\"".format(chr(c),c))
print("\t.byte\t$FF\n")	
