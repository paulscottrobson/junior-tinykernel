
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$8000" "-D SOURCE_ADDRESS=\$3000" "-D SPRITE_ADDRESS=\$30000" -q -c -b -o monitor.rom -L output/newmonitor.lst newmonitor.asm
; Sun Nov 20 05:17:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$e000					 MONITOR_ADDRESS=$E000
=$f000					 LOCKOUT_ADDRESS=$F000
=$8000					 BASIC_ADDRESS=$8000
=$3000					 SOURCE_ADDRESS=$3000
=$30000					 SPRITE_ADDRESS=$30000

;******  Processing input file: newmonitor.asm

=$fc					zTemp0 = $FC 								; 2 byte memory units.
=6					ClockMhz = 6 								; clock speed in MHz (affects repeat timing)
=1					KeyboardInvert = 1 							; 0 if keyboard active high, 1 if active low.
=8					KQSize = 8 									; size of keyboard queue
=$200					StartWorkSpace = $200
=$203					XPosition = $203 							; X Character position
=$204					YPosition = $204 							; Y Character position
=$205					TextColour = $205 							; Text colour
=$206					CurrentPage = $206 							; current I/O page
=$207					KeysInQueue = $207 							; last key press
=$208					KeyStatus = $208 							; status bits for keys, 16 x 8 bits = 128 bits.
=536					KeyboardQueue = $208+16
=544					EndWorkSpace = KeyboardQueue+KQSize
=80					CWidth = 80 								; display size
=60					CHeight = 60
=1					IOPageRegister = 1 							; select I/O Page

;******  Processing file: include/vicky.inc

=$d000					MASTER_CTRL_REG_L	    = $D000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$d001					MASTER_CTRL_REG_H	    = $D001
=$d002					VKY_RESERVED_00         = $D002
=$d003					VKY_RESERVED_01         = $D003
=$d004					BORDER_CTRL_REG         = $D004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$01					Border_Ctrl_Enable      = $01
=$d005					BORDER_COLOR_B          = $D005
=$d006					BORDER_COLOR_G          = $D006
=$d007					BORDER_COLOR_R          = $D007
=$d008					BORDER_X_SIZE           = $D008; X-  Values: 0 - 32 (Default: 32)
=$d009					BORDER_Y_SIZE           = $D009; Y- Values 0 -32 (Default: 32)
=$d00a					VKY_RESERVED_02         = $D00A
=$d00b					VKY_RESERVED_03         = $D00B
=$d00c					VKY_RESERVED_04         = $D00C
=$d00d					BACKGROUND_COLOR_B      = $D00D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$d00e					BACKGROUND_COLOR_G      = $D00E
=$d00f					BACKGROUND_COLOR_R      = $D00F ;
=$d010					VKY_TXT_CURSOR_CTRL_REG = $D010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$d011					VKY_TXT_START_ADD_PTR   = $D011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$d012					VKY_TXT_CURSOR_CHAR_REG = $D012
=$d013					VKY_TXT_CURSOR_COLR_REG = $D013
=$d014					VKY_TXT_CURSOR_X_REG_L  = $D014
=$d015					VKY_TXT_CURSOR_X_REG_H  = $D015
=$d016					VKY_TXT_CURSOR_Y_REG_L  = $D016
=$d017					VKY_TXT_CURSOR_Y_REG_H  = $D017
=$d018					VKY_LINE_IRQ_CTRL_REG   = $D018 ;[0] - Enable Line 0 - WRITE ONLY
=$d019					VKY_LINE_CMP_VALUE_LO  = $D019 ;Write Only [7:0]
=$d01a					VKY_LINE_CMP_VALUE_HI  = $D01A ;Write Only [3:0]
=$d018					VKY_PIXEL_X_POS_LO     = $D018 ; This is Where on the video line is the Pixel
=$d019					VKY_PIXEL_X_POS_HI     = $D019 ; Or what pixel is being displayed when the register is read
=$d01a					VKY_LINE_Y_POS_LO      = $D01A ; This is the Line Value of the Raster
=$d01b					VKY_LINE_Y_POS_HI      = $D01B ;
=$d100					TyVKY_BM0_CTRL_REG       = $D100
=$01					BM0_Ctrl                = $01       ; Enable the BM0
=$02					BM0_LUT0                = $02       ; LUT0
=$04					BM0_LUT1                = $04       ; LUT1
=$08					BM0_LUT2                = $08       ; LUT2
=$d101					TyVKY_BM0_START_ADDY_L   = $D101
=$d102					TyVKY_BM0_START_ADDY_M   = $D102
=$d103					TyVKY_BM0_START_ADDY_H   = $D103
=$d108					TyVKY_BM1_CTRL_REG       = $D108
=$01					BM1_Ctrl                = $01       ; Enable the BM0
=$02					BM1_LUT0                = $02       ; LUT0
=$04					BM1_LUT1                = $04       ; LUT1
=$08					BM1_LUT2                = $08       ; LUT2
=$d109					TyVKY_BM1_START_ADDY_L   = $D109
=$d10a					TyVKY_BM1_START_ADDY_M   = $D10A
=$d10b					TyVKY_BM1_START_ADDY_H   = $D10B
=$d200					TyVKY_TL_CTRL0          = $D200
=$d300					TyVKY_TL_MISC           = $D300
=$d800					TEXT_LUT_FG      = $D800
=$d840					TEXT_LUT_BG		 = $D840
=$d000					TyVKY_LUT0              = $D000 ; -$D000 - $D3FF
=$d400					TyVKY_LUT1              = $D400 ; -$D400 - $D7FF
=$d800					TyVKY_LUT2              = $D800 ; -$D800 - $DBFF
=$dc00					TyVKY_LUT3              = $DC00 ; -$DC00 - $DFFF

;******  Return to file: newmonitor.asm


;******  Processing file: include/interrupt.inc

=$d660					INT_PENDING_REG0 = $D660 ;
=$d661					INT_PENDING_REG1 = $D661 ;
=$d662					INT_PENDING_REG2 = $D662 ; NOT USED
=$d663					INT_PENDING_REG3 = $D663 ; NOT USED
=$d664					INT_POL_REG0     = $D664 ;
=$d665					INT_POL_REG1     = $D665 ;
=$d666					INT_POL_REG2     = $D666 ;  NOT USED
=$d667					INT_POL_REG3     = $D667 ; NOT USED
=$d668					INT_EDGE_REG0    = $D668 ;
=$d669					INT_EDGE_REG1    = $D669 ;
=$d66a					INT_EDGE_REG2    = $D66A ; NOT USED
=$d66b					INT_EDGE_REG3    = $D66B ; NOT USED
=$d66c					INT_MASK_REG0    = $D66C ;
=$d66d					INT_MASK_REG1    = $D66D ;
=$d66e					INT_MASK_REG2    = $D66E ; NOT USED
=$d66f					INT_MASK_REG3    = $D66F ; NOT USED
=$01					JR0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					JR0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					JR0_INT02_KBD        = $04  ;
=$08					JR0_INT03_MOUSE      = $08  ;
=$10					JR0_INT04_TMR0       = $10  ;
=$20					JR0_INT05_TMR1       = $20  ;Real-Time Clock Interrupt
=$40					JR0_INT06_DMA        = $40  ;Floppy Disk Controller
=$80					JR0_INT07_TBD        = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					JR1_INT00_UART       = $01  ;Keyboard Interrupt
=$02					JR1_INT01_COL0       = $02  ;TYVKY Collision TBD
=$04					JR1_INT02_COL1       = $04  ;TYVKY Collision TBD
=$08					JR1_INT03_COL2       = $08  ;TYVKY Collision TBD
=$10					JR1_INT04_RTC        = $10  ;Serial Port 1
=$20					JR1_INT05_VIA        = $20  ;Midi Controller Interrupt
=$40					JR1_INT06_IEC        = $40  ;Parallel Port
=$80					JR1_INT07_SDCARD     = $80  ;SDCard Insert

;******  Return to file: newmonitor.asm


;******  Processing file: src/hardware.asm

.e000					TinyVickyInitialise:
.e000	a9 01		lda #$01	            lda # Mstr_Ctrl_Text_Mode_En        ; Text on, Overlay,Graphic,Bitmap,Tilemap,Sprite,Gamma,Disable off.
.e002	8d 00 d0	sta $d000	            sta MASTER_CTRL_REG_L               ; Register $D000 in page 0
.e005	ad 00 d0	lda $d000	            lda MASTER_CTRL_REG_L
.e008	a9 01		lda #$01	            lda #Border_Ctrl_Enable             ; Enable border
.e00a	8d 04 d0	sta $d004	            sta BORDER_CTRL_REG                 ; Register $D004 in page 0
.e00d	a9 80		lda #$80	            lda #$80                            ; set border colour to $804000
.e00f	8d 05 d0	sta $d005	            sta BORDER_COLOR_B                  ; (registers $D005..$D007)
.e012	a9 00		lda #$00	            lda #$00
.e014	8d 06 d0	sta $d006	            sta BORDER_COLOR_G
.e017	a9 00		lda #$00	            lda #$00
.e019	8d 07 d0	sta $d007	            sta BORDER_COLOR_R
.e01c	a9 10		lda #$10	            lda #16                             ; border size (offset from top left ?)
.e01e	8d 08 d0	sta $d008	            sta BORDER_X_SIZE                   ; (registers $D008 .. $D009)
.e021	8d 09 d0	sta $d009	            sta BORDER_Y_SIZE
.e024	a9 05		lda #$05	            lda #Vky_Cursor_Enable | Vky_Cursor_Flash_Rate1
.e026	8d 10 d0	sta $d010	            sta VKY_TXT_CURSOR_CTRL_REG         ; turn cursor on ($D010)
.e029	a9 06		lda #$06	            lda #6
.e02b	8d 12 d0	sta $d012	            sta VKY_TXT_CURSOR_CHAR_REG         ; 160 is 128+32 so inverse space. ($D012)
.e02e	a9 1c		lda #$1c	            lda #28
.e030	8d 13 d0	sta $d013	            sta VKY_TXT_CURSOR_COLR_REG         ; colour $2 $8 ($D013)
.e033	a9 00		lda #$00	            lda #0                              ; cursor to (0,5)
.e035	8d 14 d0	sta $d014	            sta VKY_TXT_CURSOR_X_REG_L          ; ($D014 .. $D017)
.e038	8d 15 d0	sta $d015	            sta VKY_TXT_CURSOR_X_REG_H
.e03b	8d 17 d0	sta $d017	            sta VKY_TXT_CURSOR_Y_REG_H
.e03e	a9 05		lda #$05	            lda #5
.e040	8d 16 d0	sta $d016	            sta VKY_TXT_CURSOR_Y_REG_L
.e043	a9 fc		lda #$fc	            lda		#$FC   						; set text colour.
.e045	8d 05 02	sta $0205	            sta 	TextColour
.e048	60		rts		            rts
.e049					Init_Text_LUT
.e049	a2 00		ldx #$00	                LDX #$00
.e04b	bd 64 e0	lda $e064,x	lutinitloop0    LDA fg_color_lut,x      ; get Local Data
.e04e	9d 00 d8	sta $d800,x	                sta TEXT_LUT_FG,x   ; Write in LUT Memory ($D800)
.e051	e8		inx		                inx
.e052	e0 40		cpx #$40	                cpx #$40
.e054	d0 f5		bne $e04b	                bne lutinitloop0
.e056	a2 00		ldx #$00	                LDX #$00
.e058	bd a4 e0	lda $e0a4,x	lutinitloop1    LDA bg_color_lut,x      ; get Local Data
.e05b	9d 40 d8	sta $d840,x	                STA TEXT_LUT_BG,x   ; Write in LUT Memory ($D840)
.e05e	e8		inx		                INX
.e05f	e0 40		cpx #$40	                CPX #$40
.e061	d0 f5		bne $e058	                bne lutinitloop1
.e063	60		rts		                RTS
>e064	00 00 00 ff			fg_color_lut    .text $00, $00, $00, $FF
>e068	00 00 80 ff			                .text $00, $00, $80, $FF        ; blue
>e06c	00 80 00 ff			                .text $00, $80, $00, $FF        ; green
>e070	80 00 00 ff			                .text $80, $00, $00, $FF        ; red
>e074	00 80 80 ff			                .text $00, $80, $80, $FF        ; yellow (etc.)
>e078	80 80 00 ff			                .text $80, $80, $00, $FF
>e07c	80 00 80 ff			                .text $80, $00, $80, $FF
>e080	80 80 80 ff			                .text $80, $80, $80, $FF
>e084	00 45 ff ff			                .text $00, $45, $FF, $FF
>e088	13 45 8b ff			                .text $13, $45, $8B, $FF
>e08c	00 00 20 ff			                .text $00, $00, $20, $FF
>e090	00 20 00 ff			                .text $00, $20, $00, $FF
>e094	20 00 00 ff			                .text $20, $00, $00, $FF
>e098	20 20 20 ff			                .text $20, $20, $20, $FF
>e09c	ff 80 00 ff			                .text $FF, $80, $00, $FF
>e0a0	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>e0a4	00 00 00 ff			bg_color_lut    .text $00, $00, $00, $FF  ;BGRA
>e0a8	aa 00 00 ff			                .text $AA, $00, $00, $FF
>e0ac	00 80 00 ff			                .text $00, $80, $00, $FF
>e0b0	00 00 80 ff			                .text $00, $00, $80, $FF
>e0b4	00 20 20 ff			                .text $00, $20, $20, $FF
>e0b8	20 20 00 ff			                .text $20, $20, $00, $FF
>e0bc	20 00 20 ff			                .text $20, $00, $20, $FF
>e0c0	20 20 20 ff			                .text $20, $20, $20, $FF
>e0c4	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>e0c8	13 45 8b ff			                .text $13, $45, $8B, $FF
>e0cc	00 00 20 ff			                .text $00, $00, $20, $FF
>e0d0	00 20 00 ff			                .text $00, $20, $00, $FF
>e0d4	40 00 00 ff			                .text $40, $00, $00, $FF
>e0d8	10 10 10 ff			                .text $10, $10, $10, $FF
>e0dc	40 40 40 ff			                .text $40, $40, $40, $FF
>e0e0	ff ff ff ff			                .text $FF, $FF, $FF, $FF
=$d644					STATUS_PORT     = $D644;
=$d644					KBD_CMD_BUF     = $D644;
=$d640					KBD_OUT_BUF     = $D640;
=$d640					KBD_INPT_BUF    = $D640;
=$d640					KBD_DATA_BUF    = $D640;
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL   = $02
=$04					SYS_FLAG        = $04
=$08					CMD_DATA        = $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT     = $20
=$40					RCV_TMOUT       = $40
=$80					PARITY_EVEN     = $80
=$10					INH_KEYBOARD    = $10
=$ae					KBD_ENA         = $AE
=$ad					KBD_DIS         = $AD
.e0e4	ad 44 d6	lda $d644	Poll_Inbuf      lda STATUS_PORT     ; Load Status Byte
.e0e7	29 02		and #$02	                and #INPT_BUF_FULL  ; Test bit $02 (if 0, Empty)
.e0e9	c9 02		cmp #$02	                cmp #INPT_BUF_FULL
.e0eb	f0 f7		beq $e0e4	                beq Poll_Inbuf
.e0ed	60		rts		                rts
.e0ee	ad 44 d6	lda $d644	Poll_Outbuf     lda STATUS_PORT
.e0f1	29 01		and #$01	                and #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.e0f3	c9 01		cmp #$01	                cmp #OUT_BUF_FULL
.e0f5	d0 f7		bne $e0ee	                bne Poll_Outbuf
.e0f7	60		rts		                rts
.e0f8	18		clc		INITKEYBOARD    clc
.e0f9	a9 aa		lda #$aa	                lda #$AA                    ; Send self test command
.e0fb	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.e0fe	20 ee e0	jsr $e0ee	                jsr Poll_Outbuf             ; Sent Self-Test Code and Waiting for Return value, it ought to be 0x55.
.e101	ad 40 d6	lda $d640	                lda KBD_OUT_BUF             ; Check self test result
.e104	c9 55		cmp #$55	                cmp #$55
.e106	f0 03		beq $e10b	                beq passAAtest
.e108	4c 96 e1	jmp $e196	                jmp initkb_loop_out
.e10b	20 f4 e6	jsr $e6f4	passAAtest      jsr SelectPage2              ; put chr$(31) "1" on top left of screen
.e10e	a9 31		lda #$31	                lda #$31
.e110	8d 00 c0	sta $c000	                sta $C000
.e113	20 df e6	jsr $e6df	                jsr SelectPage0
.e116	20 e4 e0	jsr $e0e4	                jsr Poll_Inbuf
.e119	a9 ab		lda #$ab	                lda #$AB                     ;Send test Interface command
.e11b	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.e11e	20 ee e0	jsr $e0ee	                jsr Poll_Outbuf ;
.e121					TryAgainAB:
.e121	ad 40 d6	lda $d640	                lda KBD_OUT_BUF               ;Display Interface test results
.e124	c9 00		cmp #$00	                cmp #$00                      ;Should be 00
.e126	f0 10		beq $e138	                beq passABtest
.e128	d0 f7		bne $e121	                bne TryAgainAB
.e12a	20 f4 e6	jsr $e6f4	                jsr SelectPage2                 ; not reachable
.e12d	a9 23		lda #$23	                lda #$23
.e12f	8d 05 c0	sta $c005	                sta $C005
.e132	20 df e6	jsr $e6df	                jsr SelectPage0
.e135	4c 96 e1	jmp $e196	                jmp initkb_loop_out
.e138	20 f4 e6	jsr $e6f4	passABtest      jsr SelectPage2                  ; put "2" on top left, 2nd character
.e13b	a9 32		lda #$32	                lda #$32
.e13d	8d 01 c0	sta $c001	                sta $C001
.e140	20 df e6	jsr $e6df	                jsr SelectPage0
.e143	a9 60		lda #$60	                lda #$60                        ; Send Command 0x60 so to Enable Interrupt
.e145	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.e148	20 e4 e0	jsr $e0e4	                jsr Poll_Inbuf
.e14b	a9 41		lda #$41	                lda #%01000001                  ; Enable Interrupt (keyboard) and parallel port (?)
.e14d	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.e150	20 f4 e6	jsr $e6f4	                jsr SelectPage2                  ; put "3" on 3rd character
.e153	a9 33		lda #$33	                lda #$33
.e155	8d 02 c0	sta $c002	                sta $C002
.e158	20 df e6	jsr $e6df	                jsr SelectPage0
.e15b	20 e4 e0	jsr $e0e4	                jsr Poll_Inbuf;
.e15e	a9 ff		lda #$ff	                lda #$FF      ; Send Keyboard Reset command
.e160	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.e163	a0 ff		ldy #$ff	                 ldy #$FF
.e165	a2 ff		ldx #$ff	DLY_LOOP2       ldx #$FF
.e167	ca		dex		DLY_LOOP1       dex
.e168	ea		nop		                nop
.e169	ea		nop		                nop
.e16a	ea		nop		                nop
.e16b	ea		nop		                nop
.e16c	e0 00		cpx #$00	                cpx #$00
.e16e	d0 f7		bne $e167	                bne DLY_LOOP1
.e170	88		dey		                dey
.e171	c0 00		cpy #$00	                cpy #$00
.e173	d0 f0		bne $e165	                bne DLY_LOOP2
.e175	ea		nop		                nop
.e176	20 ee e0	jsr $e0ee	                jsr Poll_Outbuf ;
.e179	ad 40 d6	lda $d640	                lda KBD_OUT_BUF                 ; Read Output Buffer
.e17c	20 f4 e6	jsr $e6f4	                jsr SelectPage2                     ;
.e17f	a9 34		lda #$34	                lda #$34                        ; put "4" in fourth slot.
.e181	8d 03 c0	sta $c003	                sta $C003
.e184	20 df e6	jsr $e6df	                jsr SelectPage0
.e187					DO_CMD_F4_AGAIN
.e187	20 e4 e0	jsr $e0e4	                jsr Poll_Inbuf ;
.e18a	a9 f4		lda #$f4	                lda #$F4                        ; Enable the Keyboard
.e18c	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.e18f	20 ee e0	jsr $e0ee	                jsr Poll_Outbuf ;
.e192	ad 40 d6	lda $d640	                lda KBD_OUT_BUF                  ; Clear the Output buffer
.e195	60		rts		                rts
.e196					initkb_loop_out
.e196	60		rts		                rts
.e197					IRQHandler
.e197	48		pha		                pha
.e198	a5 01		lda $01		                lda     1
.e19a	48		pha		                pha
.e19b	29 f8		and #$f8	                and     #$F8
.e19d	85 01		sta $01		                sta     1
.e19f	ad 60 d6	lda $d660	                LDA INT_PENDING_REG0                ; received Keyboard interrupt ?
.e1a2	29 04		and #$04	                AND #JR0_INT02_KBD
.e1a4	c9 04		cmp #$04	                CMP #JR0_INT02_KBD
.e1a6	d0 06		bne $e1ae	                BNE EXIT_IRQ_HANDLE
.e1a8	ad 40 d6	lda $d640	                LDA KBD_INPT_BUF                    ; Get Scan Code from KeyBoard
.e1ab	20 81 e8	jsr $e881	                jsr     HandleKeyboard
.e1ae					EXIT_IRQ_HANDLE:
.e1ae	ad 60 d6	lda $d660	                lda INT_PENDING_REG0
.e1b1	8d 60 d6	sta $d660	                sta INT_PENDING_REG0
.e1b4	ad 61 d6	lda $d661	                lda INT_PENDING_REG1
.e1b7	8d 61 d6	sta $d661	                sta INT_PENDING_REG1
.e1ba	68		pla		                pla
.e1bb	85 01		sta $01		                sta     1
.e1bd	68		pla		                pla
.e1be	40		rti		                rti
.e1bf					LoadGraphicsLUT:
.e1bf	20 eb e6	jsr $e6eb	            jsr     SelectPage1
.e1c2	a2 00		ldx #$00	            ldx     #0
.e1c4	bd e0 e1	lda $e1e0,x	_LGLLoop:   lda     _GraphicsLUT,x
.e1c7	9d 00 d0	sta $d000,x	            sta     TyVKY_LUT0,x
.e1ca	bd e0 e2	lda $e2e0,x	            lda     _GraphicsLUT+256,x
.e1cd	9d 00 d1	sta $d100,x	            sta     TyVKY_LUT0+256,x
.e1d0	bd e0 e3	lda $e3e0,x	            lda     _GraphicsLUT+512,x
.e1d3	9d 00 d2	sta $d200,x	            sta     TyVKY_LUT0+512,x
.e1d6	bd e0 e4	lda $e4e0,x	            lda     _GraphicsLUT+768,x
.e1d9	9d 00 d3	sta $d300,x	            sta     TyVKY_LUT0+768,x
.e1dc	ca		dex		            dex
.e1dd	d0 e5		bne $e1c4	            bne     _LGLLoop
.e1df	60		rts		            rts
.e1e0					_GraphicsLUT:
>e1e0	00 00 00 00 aa 00 00 00		            .binary    "gfxlut.palette"
>e1e8	00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>e1f8	00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>e208	55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>e218	55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>e228	20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>e238	65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>e248	aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>e258	ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>e268	ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>e278	82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>e288	00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>e298	00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>e2a8	82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>e2b8	ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>e2c8	ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>e2d8	be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>e2e8	82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>e2f8	82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>e308	be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>e318	ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>e328	ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>e338	df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>e348	ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>e358	ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>e368	df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>e378	ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>e388	71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>e398	39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>e3a8	00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>e3b8	00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>e3c8	39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>e3d8	71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>e3e8	71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>e3f8	55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>e408	39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>e418	39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>e428	55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>e438	71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>e448	71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>e458	61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>e468	51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>e478	51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>e488	61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>e498	71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>e4a8	41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>e4b8	20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>e4c8	00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>e4d8	00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>e4e8	20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>e4f8	41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>e508	41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>e518	31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>e528	20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>e538	20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>e548	31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>e558	41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>e568	41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>e578	35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>e588	2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>e598	2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>e5a8	35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>e5b8	41 35 2d 00 41 31 2d 00 00 00 00 00 00 00 00 00
>e5c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>e5d8	00 00 00 00 00 00 00 00

;******  Return to file: newmonitor.asm


;******  Processing file: include/ps2convert.inc

.e5e0					ASCIIFromScanCode:
>e5e0	00					.byte	$00 ; $00
>e5e1	4c					.byte	$4c ; $01 Esc
>e5e2	31					.byte	$31 ; $02 1
>e5e3	32					.byte	$32 ; $03 2
>e5e4	33					.byte	$33 ; $04 3
>e5e5	34					.byte	$34 ; $05 4
>e5e6	35					.byte	$35 ; $06 5
>e5e7	36					.byte	$36 ; $07 6
>e5e8	37					.byte	$37 ; $08 7
>e5e9	38					.byte	$38 ; $09 8
>e5ea	39					.byte	$39 ; $0a 9
>e5eb	30					.byte	$30 ; $0b 0
>e5ec	2d					.byte	$2d ; $0c -
>e5ed	3d					.byte	$3d ; $0d =
>e5ee	08					.byte	$08 ; $0e Backspace
>e5ef	09					.byte	$09 ; $0f Tab
>e5f0	71					.byte	$71 ; $10 q
>e5f1	77					.byte	$77 ; $11 w
>e5f2	65					.byte	$65 ; $12 e
>e5f3	72					.byte	$72 ; $13 r
>e5f4	74					.byte	$74 ; $14 t
>e5f5	79					.byte	$79 ; $15 y
>e5f6	75					.byte	$75 ; $16 u
>e5f7	69					.byte	$69 ; $17 i
>e5f8	6f					.byte	$6f ; $18 o
>e5f9	70					.byte	$70 ; $19 p
>e5fa	5b					.byte	$5b ; $1a [
>e5fb	5d					.byte	$5d ; $1b ]
>e5fc	0d					.byte	$0d ; $1c Enter
>e5fd	00					.byte	$00 ; $1d Left Ctrl
>e5fe	61					.byte	$61 ; $1e a
>e5ff	73					.byte	$73 ; $1f s
>e600	64					.byte	$64 ; $20 d
>e601	66					.byte	$66 ; $21 f
>e602	67					.byte	$67 ; $22 g
>e603	68					.byte	$68 ; $23 h
>e604	6a					.byte	$6a ; $24 j
>e605	6b					.byte	$6b ; $25 k
>e606	6c					.byte	$6c ; $26 l
>e607	3b					.byte	$3b ; $27 ;
>e608	27					.byte	$27 ; $28 '
>e609	00					.byte	$00 ; $29
>e60a	00					.byte	$00 ; $2a Left Shift
>e60b	00					.byte	$00 ; $2b
>e60c	7a					.byte	$7a ; $2c z
>e60d	78					.byte	$78 ; $2d x
>e60e	63					.byte	$63 ; $2e c
>e60f	76					.byte	$76 ; $2f v
>e610	62					.byte	$62 ; $30 b
>e611	6e					.byte	$6e ; $31 n
>e612	6d					.byte	$6d ; $32 m
>e613	2c					.byte	$2c ; $33 ,
>e614	2e					.byte	$2e ; $34 .
>e615	2f					.byte	$2f ; $35 /
>e616	00					.byte	$00 ; $36 Right Shift
>e617	00					.byte	$00 ; $37
>e618	00					.byte	$00 ; $38 Left Alt
>e619	20					.byte	$20 ; $39 Space
>e61a	00					.byte	$00 ; $3a
>e61b	00					.byte	$00 ; $3b
>e61c	00					.byte	$00 ; $3c
>e61d	00					.byte	$00 ; $3d
>e61e	00					.byte	$00 ; $3e
>e61f	00					.byte	$00 ; $3f
>e620	00					.byte	$00 ; $40
>e621	00					.byte	$00 ; $41
>e622	00					.byte	$00 ; $42
>e623	00					.byte	$00 ; $43
>e624	00					.byte	$00 ; $44
>e625	00					.byte	$00 ; $45
>e626	00					.byte	$00 ; $46
>e627	00					.byte	$00 ; $47
>e628	00					.byte	$00 ; $48
>e629	00					.byte	$00 ; $49
>e62a	00					.byte	$00 ; $4a
>e62b	00					.byte	$00 ; $4b
>e62c	00					.byte	$00 ; $4c
>e62d	00					.byte	$00 ; $4d
>e62e	00					.byte	$00 ; $4e
>e62f	00					.byte	$00 ; $4f
>e630	00					.byte	$00 ; $50
>e631	00					.byte	$00 ; $51
>e632	00					.byte	$00 ; $52
>e633	00					.byte	$00 ; $53
>e634	00					.byte	$00 ; $54
>e635	00					.byte	$00 ; $55
>e636	00					.byte	$00 ; $56 \\
>e637	00					.byte	$00 ; $57
>e638	00					.byte	$00 ; $58
>e639	00					.byte	$00 ; $59
>e63a	00					.byte	$00 ; $5a
>e63b	00					.byte	$00 ; $5b
>e63c	00					.byte	$00 ; $5c
>e63d	00					.byte	$00 ; $5d
>e63e	00					.byte	$00 ; $5e
>e63f	00					.byte	$00 ; $5f
>e640	00					.byte	$00 ; $60
>e641	00					.byte	$00 ; $61
>e642	00					.byte	$00 ; $62
>e643	00					.byte	$00 ; $63
>e644	00					.byte	$00 ; $64
>e645	00					.byte	$00 ; $65
>e646	00					.byte	$00 ; $66
>e647	00					.byte	$00 ; $67
>e648	00					.byte	$00 ; $68
>e649	00					.byte	$00 ; $69
>e64a	00					.byte	$00 ; $6a
>e64b	00					.byte	$00 ; $6b
>e64c	00					.byte	$00 ; $6c
>e64d	00					.byte	$00 ; $6d
>e64e	00					.byte	$00 ; $6e
>e64f	00					.byte	$00 ; $6f
>e650	00					.byte	$00 ; $70
>e651	00					.byte	$00 ; $71
>e652	00					.byte	$00 ; $72
>e653	00					.byte	$00 ; $73
>e654	00					.byte	$00 ; $74
>e655	00					.byte	$00 ; $75
>e656	00					.byte	$00 ; $76
>e657	00					.byte	$00 ; $77
>e658	00					.byte	$00 ; $78
>e659	00					.byte	$00 ; $79
>e65a	00					.byte	$00 ; $7a
>e65b	00					.byte	$00 ; $7b
>e65c	00					.byte	$00 ; $7c
>e65d	00					.byte	$00 ; $7d
>e65e	00					.byte	$00 ; $7e
>e65f	00					.byte	$00 ; $7f
>e660	00					.byte	$00 ; $80
>e661	00					.byte	$00 ; $81
>e662	00					.byte	$00 ; $82
>e663	00					.byte	$00 ; $83
>e664	00					.byte	$00 ; $84
>e665	00					.byte	$00 ; $85
>e666	00					.byte	$00 ; $86
>e667	00					.byte	$00 ; $87
>e668	00					.byte	$00 ; $88
>e669	00					.byte	$00 ; $89
>e66a	00					.byte	$00 ; $8a
>e66b	00					.byte	$00 ; $8b
>e66c	00					.byte	$00 ; $8c
>e66d	00					.byte	$00 ; $8d
>e66e	00					.byte	$00 ; $8e
>e66f	00					.byte	$00 ; $8f
>e670	ff					.byte	$FF
.e671					ShiftFixTable:
>e671	31					.byte	$31 ; "1"
>e672	21					.byte	$21 ; "!"
>e673	32					.byte	$32 ; "2"
>e674	40					.byte	$40 ; "@"
>e675	33					.byte	$33 ; "3"
>e676	23					.byte	$23 ; "#"
>e677	34					.byte	$34 ; "4"
>e678	24					.byte	$24 ; "$"
>e679	35					.byte	$35 ; "5"
>e67a	25					.byte	$25 ; "%"
>e67b	36					.byte	$36 ; "6"
>e67c	5e					.byte	$5e ; "^"
>e67d	37					.byte	$37 ; "7"
>e67e	26					.byte	$26 ; "&"
>e67f	38					.byte	$38 ; "8"
>e680	2a					.byte	$2a ; "*"
>e681	39					.byte	$39 ; "9"
>e682	28					.byte	$28 ; "("
>e683	30					.byte	$30 ; "0"
>e684	29					.byte	$29 ; ")"
>e685	2d					.byte	$2d ; "-"
>e686	5f					.byte	$5f ; "_"
>e687	3d					.byte	$3d ; "="
>e688	2b					.byte	$2b ; "+"
>e689	3b					.byte	$3b ; ";"
>e68a	3a					.byte	$3a ; ":"
>e68b	27					.byte	$27 ; "'"
>e68c	22					.byte	$22 ; """
>e68d	2c					.byte	$2c ; ","
>e68e	3c					.byte	$3c ; "<"
>e68f	2e					.byte	$2e ; "."
>e690	3e					.byte	$3e ; ">"
>e691	2f					.byte	$2f ; "/"
>e692	3f					.byte	$3f ; "?"
>e693	ff					.byte	$FF

;******  Return to file: newmonitor.asm


;******  Processing file: src/init_graphics_palettes.asm

.e694					init_graphics_palettes
.e694	da		phx		            phx
.e695	5a		phy		            phy
.e696	a4 01		ldy $01		            ldy     $1
.e698	a9 01		lda #$01	            lda     #1
.e69a	85 01		sta $01		            sta     $1
.e69c	64 fc		stz $fc		            stz     zTemp0+0
.e69e	a9 d0		lda #$d0	            lda     #$d0
.e6a0	85 fd		sta $fd		            sta     zTemp0+1
.e6a2	a2 00		ldx #$00	            ldx     #0          ; Starting color byte.
.e6a4					_loop
.e6a4	20 be e6	jsr $e6be	            jsr     write_bgra
.e6a7	e8		inx		            inx
.e6a8	a5 fc		lda $fc		            lda     zTemp0
.e6aa	69 04		adc #$04	            adc     #4
.e6ac	85 fc		sta $fc		            sta     zTemp0
.e6ae	d0 f4		bne $e6a4	            bne     _loop
.e6b0	a5 fd		lda $fd		            lda     zTemp0+1
.e6b2	1a		inc a		            inc     a
.e6b3	85 fd		sta $fd		            sta     zTemp0+1
.e6b5	c9 e0		cmp #$e0	            cmp     #$e0
.e6b7	d0 eb		bne $e6a4	            bne     _loop
.e6b9	84 01		sty $01		            sty     $1
.e6bb	7a		ply		            ply
.e6bc	fa		plx		            plx
.e6bd	60		rts		            rts
.e6be					write_bgra
.e6be	5a		phy		            phy
.e6bf	a0 03		ldy #$03	            ldy     #3  ; Working backwards: A,R,G,B
.e6c1	a9 ff		lda #$ff	            lda     #255
.e6c3	20 d2 e6	jsr $e6d2	            jsr     _write
.e6c6	8a		txa		            txa
.e6c7	88		dey		_loop       dey
.e6c8	30 05		bmi $e6cf	            bmi     _done
.e6ca	20 d2 e6	jsr $e6d2	            jsr     _write
.e6cd	80 f8		bra $e6c7	            bra     _loop
.e6cf	7a		ply		_done       ply
.e6d0	18		clc		            clc
.e6d1	60		rts		            rts
.e6d2					_write
.e6d2	48		pha		            pha
.e6d3	29 e0		and #$e0	            and     #%111_00000
.e6d5	91 fc		sta ($fc),y	            sta     (zTemp0),y
.e6d7	68		pla		            pla
.e6d8	0a		asl a		            asl     a
.e6d9	0a		asl a		            asl     a
.e6da	0a		asl a		            asl     a
.e6db	60		rts		            rts

;******  Return to file: newmonitor.asm

.e6dc	ad 00 e0	lda $e000		lda 	MONITOR_ADDRESS
.e6df					SelectPage0:
.e6df	48		pha			pha
.e6e0	a5 01		lda $01			lda 	IOPageRegister
.e6e2	29 fc		and #$fc		and 	#$FC
.e6e4					SelectPageWrite:
.e6e4	85 01		sta $01			sta 	IOPageRegister
.e6e6	8d 06 02	sta $0206		sta 	CurrentPage
.e6e9	68		pla			pla
.e6ea	60		rts			rts
.e6eb					SelectPage1:
.e6eb	48		pha			pha
.e6ec	a5 01		lda $01			lda 	IOPageRegister
.e6ee	29 fc		and #$fc		and 	#$FC
.e6f0	09 01		ora #$01		ora 	#1
.e6f2	80 f0		bra $e6e4		bra 	SelectPageWrite
.e6f4					SelectPage2:
.e6f4	48		pha			pha
.e6f5	a5 01		lda $01			lda 	IOPageRegister
.e6f7	29 fc		and #$fc		and 	#$FC
.e6f9	09 02		ora #$02		ora 	#2
.e6fb	80 e7		bra $e6e4		bra 	SelectPageWrite
.e6fd					SelectPage3:
.e6fd	48		pha			pha
.e6fe	a5 01		lda $01			lda 	IOPageRegister
.e700	09 03		ora #$03		ora 	#3
.e702	80 e0		bra $e6e4		bra 	SelectPageWrite
.e704					ClearScreen:
.e704	da		phx			phx
.e705	20 fd e6	jsr $e6fd		jsr 	SelectPage3
.e708	ad 05 02	lda $0205		lda 	TextColour
.e70b	20 18 e7	jsr $e718		jsr 	_ScreenFill
.e70e	20 f4 e6	jsr $e6f4		jsr 	SelectPage2
.e711	a9 20		lda #$20		lda 	#$20
.e713	20 18 e7	jsr $e718		jsr 	_ScreenFill
.e716	fa		plx			plx
.e717	60		rts			rts
.e718					_ScreenFill:
.e718	48		pha			pha
.e719	a9 c0		lda #$c0		lda 	#$C0 								; fill D000-D7FF with $60
.e71b	85 fd		sta $fd			sta 	zTemp0+1
.e71d	a9 00		lda #$00		lda 	#$00
.e71f	85 fc		sta $fc			sta 	zTemp0
.e721	a0 00		ldy #$00		ldy 	#0
.e723	68		pla			pla
.e724					_CLSLoop:
.e724	91 fc		sta ($fc),y		sta 	(zTemp0),y
.e726	c8		iny			iny
.e727	d0 fb		bne $e724		bne 	_CLSLoop
.e729	e6 fd		inc $fd			inc 	zTemp0+1
.e72b	a6 fd		ldx $fd			ldx 	zTemp0+1
.e72d	e0 d3		cpx #$d3		cpx 	#$D3
.e72f	d0 f3		bne $e724		bne 	_CLSLoop
.e731	20 df e6	jsr $e6df		jsr 	SelectPage0
.e734					HomeCursor:
.e734	a9 00		lda #$00		lda 	#0
.e736	8d 03 02	sta $0203		sta 	xPosition
.e739	8d 04 02	sta $0204		sta 	yPosition
.e73c	20 40 e7	jsr $e740		jsr 	UpdateCursor
.e73f	60		rts			rts
.e740					UpdateCursor:
.e740	48		pha			pha
.e741	ad 03 02	lda $0203		lda 	xPosition
.e744	8d 14 d0	sta $d014		sta 	$D014
.e747	ad 04 02	lda $0204		lda 	yPosition
.e74a	8d 16 d0	sta $d016		sta 	$D016
.e74d	68		pla			pla
.e74e	60		rts			rts
.e74f					SetZTemp0CharPos:
.e74f	48		pha			pha
.e750	8a		txa			txa
.e751	48		pha			pha
.e752	ad 04 02	lda $0204		lda 	yPosition 						; zTemp0 = yPos
.e755	85 fc		sta $fc			sta 	zTemp0
.e757	a9 00		lda #$00		lda 	#0
.e759	85 fd		sta $fd			sta 	zTemp0+1
.e75b	a2 06		ldx #$06		ldx 	#6 								; x 80
.e75d					_SZ0Shift:
.e75d	06 fc		asl $fc			asl 	zTemp0
.e75f	26 fd		rol $fd			rol 	zTemp0+1
.e761	e0 05		cpx #$05		cpx 	#5
.e763	d0 0c		bne $e771		bne 	_SZ0NoAdd
.e765	18		clc			clc
.e766	a5 fc		lda $fc			lda 	zTemp0
.e768	6d 04 02	adc $0204		adc 	yPosition
.e76b	85 fc		sta $fc			sta 	zTemp0
.e76d	90 02		bcc $e771		bcc 	_SZ0NoAdd
.e76f	e6 fd		inc $fd			inc 	zTemp0+1
.e771					_SZ0NoAdd:
.e771	ca		dex			dex
.e772	d0 e9		bne $e75d		bne 	_SZ0Shift
.e774	18		clc			clc
.e775	a5 fc		lda $fc			lda 	zTemp0 							; add in xPos
.e777	6d 03 02	adc $0203		adc 	xPosition
.e77a	85 fc		sta $fc			sta 	zTemp0
.e77c	a5 fd		lda $fd			lda 	zTemp0+1 						; point to page D
.e77e	69 c0		adc #$c0		adc 	#$C0
.e780	85 fd		sta $fd			sta 	zTemp0+1
.e782	68		pla			pla
.e783	aa		tax			tax
.e784	68		pla			pla
.e785	60		rts			rts
.e786					PrintHex:
.e786	48		pha			pha
.e787	a9 20		lda #$20		lda 	#32
.e789	20 a9 e7	jsr $e7a9		jsr 	PrintCharacter
.e78c	68		pla			pla
.e78d	48		pha			pha
.e78e	48		pha			pha
.e78f	4a		lsr a			lsr 	a
.e790	4a		lsr a			lsr 	a
.e791	4a		lsr a			lsr 	a
.e792	4a		lsr a			lsr 	a
.e793	20 9c e7	jsr $e79c		jsr 	PrintNibble
.e796	68		pla			pla
.e797	20 9c e7	jsr $e79c		jsr 	PrintNibble
.e79a	68		pla			pla
.e79b	60		rts			rts
.e79c					PrintNibble:
.e79c	29 0f		and #$0f		and 	#15
.e79e	c9 0a		cmp #$0a		cmp 	#10
.e7a0	90 02		bcc $e7a4		bcc 	_PN0
.e7a2	69 06		adc #$06		adc 	#6
.e7a4					_PN0:
.e7a4	69 30		adc #$30		adc 	#48
.e7a6	4c a9 e7	jmp $e7a9		jmp 	PrintCharacter
.e7a9					PrintCharacter:
.e7a9	48		pha			pha
.e7aa	da		phx			phx
.e7ab	5a		phy			phy
.e7ac	a6 01		ldx $01			ldx 	1
.e7ae	da		phx			phx
.e7af	20 f4 e6	jsr $e6f4		jsr 	SelectPage2
.e7b2	48		pha			pha
.e7b3	c9 08		cmp #$08		cmp 	#8
.e7b5	f0 51		beq $e808		beq 	_PCBackspace
.e7b7	c9 09		cmp #$09		cmp 	#9
.e7b9	f0 3f		beq $e7fa		beq 	_PCTab
.e7bb	c9 0d		cmp #$0d		cmp 	#13
.e7bd	f0 5a		beq $e819		beq 	_PCCRLF
.e7bf	20 4f e7	jsr $e74f		jsr 	SetZTemp0CharPos 				; all other characters
.e7c2	92 fc		sta ($fc)		sta 	(zTemp0)
.e7c4	20 fd e6	jsr $e6fd		jsr 	SelectPage3
.e7c7	ad 05 02	lda $0205		lda 	TextColour
.e7ca	92 fc		sta ($fc)		sta 	(zTemp0)
.e7cc	20 f4 e6	jsr $e6f4		jsr 	SelectPage2
.e7cf	ee 03 02	inc $0203		inc 	xPosition
.e7d2	ad 03 02	lda $0203		lda 	xPosition
.e7d5	c9 50		cmp #$50		cmp  	#CWidth
.e7d7	d0 13		bne $e7ec		bne 	_PCNotRight
.e7d9	9c 03 02	stz $0203		stz 	xPosition
.e7dc	ee 04 02	inc $0204		inc 	yPosition
.e7df	ad 04 02	lda $0204		lda 	yPosition
.e7e2	c9 3c		cmp #$3c		cmp 	#CHeight
.e7e4	d0 06		bne $e7ec		bne 	_PCNotRight
.e7e6	ce 04 02	dec $0204		dec 	yPosition
.e7e9	20 26 e8	jsr $e826		jsr 	ScrollScreenUp
.e7ec					_PCNotRight:
.e7ec	20 df e6	jsr $e6df		jsr 	SelectPage0
.e7ef	20 40 e7	jsr $e740		jsr 	UpdateCursor
.e7f2	68		pla			pla
.e7f3	fa		plx			plx
.e7f4	86 01		stx $01			stx 	1
.e7f6	7a		ply			ply
.e7f7	fa		plx			plx
.e7f8	68		pla			pla
.e7f9	60		rts			rts
.e7fa					_PCTab:
.e7fa	a9 20		lda #$20		lda 	#' '
.e7fc	20 a9 e7	jsr $e7a9		jsr 	PrintCharacter
.e7ff	ad 03 02	lda $0203		lda 	xPosition
.e802	29 07		and #$07		and 	#7
.e804	d0 f4		bne $e7fa		bne 	_PCTab
.e806	80 e4		bra $e7ec		bra 	_PCNotRight
.e808					_PCBackspace:
.e808	ad 03 02	lda $0203		lda 	xPosition
.e80b	f0 df		beq $e7ec		beq 	_PCNotRight
.e80d	ce 03 02	dec $0203		dec 	xPosition
.e810	20 4f e7	jsr $e74f		jsr 	SetZTemp0CharPos
.e813	a9 20		lda #$20		lda 	#' '
.e815	92 fc		sta ($fc)		sta 	(zTemp0)
.e817	80 d3		bra $e7ec		bra 	_PCNotRight
.e819					_PCCRLF:
.e819	a9 20		lda #$20		lda 	#$20 							; fill with EOL $20
.e81b	20 a9 e7	jsr $e7a9		jsr 	PrintCharacter
.e81e	ad 03 02	lda $0203		lda 	xPosition 						; until back at left
.e821	d0 f6		bne $e819		bne 	_PCCRLF
.e823	80 c7		bra $e7ec		bra 	_PCNotRight
.e825					NMIHandler:
.e825	40		rti				rti
.e826					ScrollScreenUp:
.e826	98		tya			tya
.e827	48		pha			pha
.e828	20 fd e6	jsr $e6fd		jsr 	SelectPage3
.e82b	20 54 e8	jsr $e854		jsr 	_ScrollBank
.e82e	ad 05 02	lda $0205		lda 	TextColour
.e831	20 42 e8	jsr $e842		jsr 	_WriteBottomLine
.e834	20 f4 e6	jsr $e6f4		jsr 	SelectPage2
.e837	20 54 e8	jsr $e854		jsr 	_ScrollBank
.e83a	a9 20		lda #$20		lda 	#32
.e83c	20 42 e8	jsr $e842		jsr 	_WriteBottomLine
.e83f	68		pla			pla
.e840	a8		tay			tay
.e841	60		rts			rts
.e842					_WriteBottomLine
.e842	48		pha			pha
.e843	a9 70		lda #$70		lda 	#$70
.e845	85 fc		sta $fc			sta 	zTemp0
.e847	a9 d2		lda #$d2		lda 	#$D2
.e849	85 fd		sta $fd			sta 	zTemp0+1
.e84b	a0 4f		ldy #$4f		ldy 	#CWidth-1
.e84d	68		pla			pla
.e84e					_ScrollBottomLine:
.e84e	91 fc		sta ($fc),y		sta 	(zTemp0),y
.e850	88		dey			dey
.e851	10 fb		bpl $e84e		bpl 	_ScrollBottomLine
.e853	60		rts			rts
.e854					_ScrollBank
.e854	a9 c0		lda #$c0		lda 	#$C0
.e856	85 fd		sta $fd			sta 	zTemp0+1
.e858	a9 00		lda #$00		lda 	#$00
.e85a	85 fc		sta $fc			sta 	zTemp0
.e85c	a0 50		ldy #$50		ldy 	#CWidth
.e85e					_ScrollLoop:
.e85e	b1 fc		lda ($fc),y		lda 	(zTemp0),y
.e860	92 fc		sta ($fc)		sta 	(zTemp0)
.e862	e6 fc		inc $fc			inc 	zTemp0
.e864	d0 f8		bne $e85e		bne 	_ScrollLoop
.e866	e6 fd		inc $fd			inc 	zTemp0+1
.e868	a5 fd		lda $fd			lda 	zTemp0+1
.e86a	c9 d3		cmp #$d3		cmp 	#$D3
.e86c	d0 f0		bne $e85e		bne 	_ScrollLoop
.e86e	60		rts			rts
.e86f					ControlCCheck:
.e86f	ad 0b 02	lda $020b		lda 	KeyStatus+3 				; check LCtrl pressed
.e872	29 20		and #$20		and 	#$20
.e874	f0 08		beq $e87e		beq 	Exit2
.e876	ad 0d 02	lda $020d		lda 	KeyStatus+5 				; check C pressed
.e879	29 40		and #$40		and 	#$40 						; non-zero if so
.e87b	49 40		eor #$40		eor 	#$40 				 		; Z set if so.
.e87d	60		rts			rts
.e87e					Exit2:
.e87e	a9 ff		lda #$ff		lda 	#$FF 						; NZ set
.e880	60		rts			rts
.e881					HandleKeyboard:
.e881	48		pha				pha
.e882	da		phx				phx
.e883	5a		phy				phy
.e884	48		pha				pha 									; save new code
.e885	48		pha				pha 									; 2nd save
.e886	48		pha				pha 									; 3rd save
.e887	29 7f		and #$7f			and 	#$7F
.e889	4a		lsr a				lsr 	a 								; divide by 8 -> X, offset in table
.e88a	4a		lsr a				lsr 	a
.e88b	4a		lsr a				lsr 	a
.e88c	aa		tax				tax
.e88d	68		pla				pla 									; restore 3rd save
.e88e	29 07		and #$07			and 	#7 								; count in Y
.e890	a8		tay				tay
.e891	a9 00		lda #$00			lda 	#0
.e893	38		sec				sec
.e894					_HKGetBits:
.e894	2a		rol a				rol 	a
.e895	88		dey				dey
.e896	10 fc		bpl $e894			bpl 	_HKGetBits
.e898	7a		ply				ply 									; restore 2nd save
.e899	30 05		bmi $e8a0			bmi 	_HKRelease
.e89b	1d 08 02	ora $0208,x			ora 	KeyStatus,x  					; set bit
.e89e	80 05		bra $e8a5			bra 	_HKWrite
.e8a0					_HKRelease:
.e8a0	49 ff		eor #$ff			eor 	#$FF 							; clear bit
.e8a2	3d 08 02	and $0208,x			and 	KeyStatus,x
.e8a5					_HKWrite:
.e8a5	9d 08 02	sta $0208,x			sta 	KeyStatus,x
.e8a8	68		pla				pla 									; restore new code
.e8a9	30 03		bmi $e8ae			bmi 	_HKExit
.e8ab	20 b2 e8	jsr $e8b2			jsr 	ConvertInsertKey
.e8ae					_HKExit:
.e8ae	7a		ply				ply
.e8af	fa		plx				plx
.e8b0	68		pla				pla
.e8b1	60		rts				rts
.e8b2					ConvertInsertKey:
.e8b2	aa		tax				tax 								; scan code in X
.e8b3	bd e0 e5	lda $e5e0,x			lda 	ASCIIFromScanCode,x 		; get ASCII unshifted
.e8b6	f0 39		beq $e8f1			beq 	_CIKExit 					; key not known
.e8b8	a8		tay				tay 								; save in Y
.e8b9	30 2a		bmi $e8e5			bmi 	_CIKEndShiftCheck 			; if bit 7 was set shift doesn't affect this.
.e8bb	ad 0d 02	lda $020d			lda 	KeyStatus+5 				; check left shift
.e8be	29 04		and #$04			and 	#4
.e8c0	d0 07		bne $e8c9			bne 	_CIKShift
.e8c2	ad 0e 02	lda $020e			lda 	KeyStatus+6 				; check right shift
.e8c5	29 40		and #$40			and 	#$40
.e8c7	f0 1c		beq $e8e5			beq 	_CIKEndShiftCheck
.e8c9					_CIKShift:
.e8c9	a2 fe		ldx #$fe			ldx 	#254 						; check shift table.
.e8cb					_CIKShiftNext:
.e8cb	e8		inx				inx
.e8cc	e8		inx				inx
.e8cd	3c 71 e6	bit $e671,x			bit  	ShiftFixTable,x 			; end of table ?
.e8d0	30 0b		bmi $e8dd			bmi 	_CIDefaultShift
.e8d2	98		tya				tya 								; found a match ?
.e8d3	dd 71 e6	cmp $e671,x			cmp 	ShiftFixTable,x
.e8d6	d0 f3		bne $e8cb			bne 	_CIKShiftNext
.e8d8	bc 72 e6	ldy $e672,x			ldy 	ShiftFixTable+1,x 			; get replacement
.e8db	80 08		bra $e8e5			bra 	_CIKEndShiftCheck
.e8dd					_CIDefaultShift:
.e8dd	c9 20		cmp #$20			cmp 	#32
.e8df	90 04		bcc $e8e5			bcc 	_CIKEndShiftCheck
.e8e1	98		tya				tya 								; default shift.
.e8e2	49 20		eor #$20			eor 	#32
.e8e4	a8		tay				tay
.e8e5					_CIKEndShiftCheck:
.e8e5	ad 0b 02	lda $020b			lda 	KeyStatus+3 				; check LCtrl pressed
.e8e8	29 20		and #$20			and 	#$20
.e8ea	f0 04		beq $e8f0			beq 	_CIKNotControl
.e8ec	98		tya				tya 								; lower 5 bits only on control.
.e8ed	29 1f		and #$1f			and 	#31
.e8ef	a8		tay				tay
.e8f0					_CIKNotControl:
.e8f0	98		tya				tya
.e8f1					_CIKExit:
.e8f1	ac 07 02	ldy $0207			ldy 	KeysInQueue 				; space in queue ?
.e8f4	c0 08		cpy #$08			cpy 	#KQSize
.e8f6	f0 06		beq $e8fe			beq 	_CIKQueueFull
.e8f8	99 18 02	sta $0218,y			sta 	KeyboardQueue,y 			; write to queue.
.e8fb	ee 07 02	inc $0207			inc 	KeysInQueue
.e8fe					_CIKQueueFull:
.e8fe	60		rts				rts
.e8ff					NewReadKeyboard:
.e8ff	20 10 e9	jsr $e910			jsr 	GetKeyIfPressed
.e902	f0 fb		beq $e8ff			beq 	NewReadKeyboard
.e904	60		rts				rts
.e905					FakeKeyboardRead:
.e905	20 ff e8	jsr $e8ff			jsr 	NewReadKeyboard 			; echo everything except CR, makes
.e908	c9 0d		cmp #$0d			cmp 	#13 						; it behave like the C64 with it's
.e90a	f0 03		beq $e90f			beq 	_FKRExit 					; line editing
.e90c	20 a9 e7	jsr $e7a9			jsr 	PrintCharacter
.e90f					_FKRExit:
.e90f	60		rts				rts
.e910					GetKeyIfPressed:
.e910	ad 07 02	lda $0207			lda 	KeysInQueue 				; anything in queue
.e913	f0 17		beq $e92c			beq 	_GIKExit 					; if not, exit with A = 0, Z set
.e915	ad 18 02	lda $0218			lda 	KeyboardQueue 				; get and push front of queue
.e918	48		pha				pha
.e919	da		phx				phx
.e91a	a2 00		ldx #$00			ldx 	#0 							; remove from queue
.e91c					_GIKPop:
.e91c	bd 19 02	lda $0219,x			lda 	KeyboardQueue+1,x
.e91f	9d 18 02	sta $0218,x			sta 	KeyboardQueue,x
.e922	e8		inx				inx
.e923	e0 08		cpx #$08			cpx 	#KQSize
.e925	d0 f5		bne $e91c			bne 	_GIKPop
.e927	ce 07 02	dec $0207			dec 	KeysInQueue 				; one fewer in queue
.e92a	fa		plx				plx
.e92b	68		pla				pla 								; restore front of queue setting Z
.e92c					_GIKExit:
.e92c	60		rts				rts
.e92d					SystemReset:
.e92d	a2 ff		ldx #$ff		ldx		#$FF
.e92f	9a		txs			txs
.e930	78		sei			sei
.e931	a9 80		lda #$80		lda 	#$80
.e933	85 00		sta $00			sta 	0
.e935	a2 06		ldx #$06		ldx 	#6
.e937					_SRInitLut:
.e937	8a		txa			txa
.e938	95 08		sta $08,x		sta 	8,x
.e93a	ca		dex			dex
.e93b	10 fa		bpl $e937		bpl 	_SRInitLut
.e93d	64 00		stz $00			stz 	0
.e93f	a2 20		ldx #$20		ldx 	#EndWorkSpace-StartWorkSpace
.e941					_SRClear:
.e941	9e ff 01	stz $01ff,x		stz 	StartWorkSpace-1,x
.e944	ca		dex			dex
.e945	e0 ff		cpx #$ff		cpx 	#$FF
.e947	d0 f8		bne $e941		bne 	_SRClear
.e949	20 df e6	jsr $e6df		jsr 	SelectPage0
.e94c	a9 ff		lda #$ff	    LDA #$FF
.e94e	8d 68 d6	sta $d668	    STA INT_EDGE_REG0
.e951	8d 69 d6	sta $d669	    STA INT_EDGE_REG1
.e954	8d 6c d6	sta $d66c	    STA INT_MASK_REG0
.e957	8d 6d d6	sta $d66d	    STA INT_MASK_REG1
.e95a	ad 60 d6	lda $d660	    lda INT_PENDING_REG0
.e95d	8d 60 d6	sta $d660	    sta INT_PENDING_REG0
.e960	ad 61 d6	lda $d661	    lda INT_PENDING_REG1
.e963	8d 61 d6	sta $d661	    sta INT_PENDING_REG1
.e966	20 00 e0	jsr $e000		jsr 	TinyVickyInitialise
.e969	20 49 e0	jsr $e049		jsr 	Init_Text_LUT
.e96c	20 bf e1	jsr $e1bf		jsr 	LoadGraphicsLUT
.e96f	20 04 e7	jsr $e704		jsr 	ClearScreen
.e972	ee 04 02	inc $0204		inc 	yPosition
.e975	ee 04 02	inc $0204		inc 	yPosition
.e978	a9 c8		lda #$c8	    lda #200
.e97a	8d 19 d0	sta $d019	    sta VKY_LINE_CMP_VALUE_LO
.e97d	a9 00		lda #$00	    lda #0
.e97f	8d 1a d0	sta $d01a	    sta VKY_LINE_CMP_VALUE_HI
.e982	a9 01		lda #$01	    lda #$01
.e984	8d 18 d0	sta $d018	    sta VKY_LINE_IRQ_CTRL_REG
.e987	78		sei		    SEI
.e988	ad 60 d6	lda $d660	    lda INT_PENDING_REG0  ; Read the Pending Register &
.e98b	29 02		and #$02	    and #JR0_INT01_SOL
.e98d	8d 60 d6	sta $d660	    sta INT_PENDING_REG0  ; Writing it back will clear the Active Bit
.e990	ad 6c d6	lda $d66c	    lda INT_MASK_REG0
.e993	29 fd		and #$fd	    and #~JR0_INT01_SOL
.e995	8d 6c d6	sta $d66c	    sta INT_MASK_REG0
.e998	ad 60 d6	lda $d660	    lda INT_PENDING_REG0  ; Read the Pending Register &
.e99b	29 04		and #$04	    and #JR0_INT02_KBD
.e99d	8d 60 d6	sta $d660	    sta INT_PENDING_REG0  ; Writing it back will clear the Active Bit
.e9a0	ad 6c d6	lda $d66c	    lda INT_MASK_REG0
.e9a3	29 fb		and #$fb	    and #~JR0_INT02_KBD
.e9a5	8d 6c d6	sta $d66c	    sta INT_MASK_REG0
.e9a8	20 df e6	jsr $e6df		jsr 	SelectPage0
.e9ab	a9 01		lda #$01		lda 	#1
.e9ad	8d 00 d1	sta $d100		sta 	$D100
.e9b0	9c 01 d1	stz $d101		stz 	$D101
.e9b3	9c 02 d1	stz $d102		stz 	$D102
.e9b6	9c 03 d1	stz $d103		stz 	$D103
.e9b9	ee 00 07	inc $0700		inc 	$700
.e9bc	ad 00 07	lda $0700		lda 	$700
.e9bf	29 0f		and #$0f		and 	#15
.e9c1	09 40		ora #$40		ora 	#64
.e9c3	20 d2 ff	jsr $ffd2		jsr 	$FFD2
.e9c6	20 d2 ff	jsr $ffd2		jsr 	$FFD2
.e9c9	20 94 e6	jsr $e694		jsr 	init_graphics_palettes
.e9cc	20 f8 e0	jsr $e0f8		jsr 	INITKEYBOARD
.e9cf	a9 b3		lda #$b3		lda 	#$80+$30+$03 						; LUT 3 , Edit 3, Active 3
.e9d1	85 00		sta $00			sta 	$00
.e9d3	20 ed e9	jsr $e9ed		jsr 	init_text_palette
.e9d6	58		cli			cli
.e9d7	4c 00 80	jmp $8000		jmp 	$8000
.e9da					NextChar:
.e9da	20 ff e8	jsr $e8ff		jsr 	NewReadKeyboard
.e9dd	20 86 e7	jsr $e786		jsr 	PrintHex
.e9e0	20 a9 e7	jsr $e7a9		jsr 	PrintCharacter
.e9e3	4c da e9	jmp $e9da		jmp 	NextChar
.e9e6					ReadKeyboardStatusTable:
.e9e6	da		phx			phx
.e9e7	aa		tax			tax
.e9e8	bd 08 02	lda $0208,x		lda 	KeyStatus,x
.e9eb	fa		plx			plx
.e9ec	60		rts			rts
.e9ed					init_text_palette
.e9ed	64 01		stz $01					stz 	1
.e9ef	a2 00		ldx #$00	            ldx     #0
.e9f1	bd 00 ea	lda $ea00,x	_loop       lda     _palette,x
.e9f4	9d 00 d8	sta $d800,x	            sta     TEXT_LUT_FG,x
.e9f7	9d 40 d8	sta $d840,x	            sta     TEXT_LUT_BG,x
.e9fa	e8		inx		            inx
.e9fb	e0 40		cpx #$40	            cpx     #64
.e9fd	d0 f2		bne $e9f1	            bne     _loop
.e9ff	60		rts		            rts
.ea00					_palette
>ea00	00 00 00 00			            .dword  $000000
>ea04	ff ff ff 00			            .dword  $ffffff
>ea08	00 00 88 00			            .dword  $880000
>ea0c	ee ff aa 00			            .dword  $aaffee
>ea10	cc 44 cc 00			            .dword  $cc44cc
>ea14	55 cc 00 00			            .dword  $00cc55
>ea18	aa 00 00 00			            .dword  $0000aa
>ea1c	77 dd dd 00			            .dword  $dddd77
>ea20	55 88 dd 00			            .dword  $dd8855
>ea24	00 44 66 00			            .dword  $664400
>ea28	77 77 ff 00			            .dword  $ff7777
>ea2c	33 33 33 00			            .dword  $333333
>ea30	77 77 77 00			            .dword  $777777
>ea34	66 ff aa 00			            .dword  $aaff66
>ea38	ff 88 00 00			            .dword  $0088ff
>ea3c	bb bb bb 00			            .dword  $bbbbbb
.ffcf	4c 05 e9	jmp $e905		jmp 	FakeKeyboardRead
.ffd2	4c a9 e7	jmp $e7a9		jmp 	PrintCharacter
.ffe1	4c 6f e8	jmp $e86f		jmp 	ControlCCheck
.ffe4	4c 10 e9	jmp $e910		jmp 	GetKeyIfPressed
.ffe7	4c e6 e9	jmp $e9e6		jmp 	ReadKeyboardStatusTable
.ffea	4c 04 e7	jmp $e704		jmp 	ClearScreen
>fffa	25 e8					.word 	NMIHandler                       	; nmi ($FFFA)
>fffc	2d e9					.word 	SystemReset                         ; reset ($FFFC)
>fffe	97 e1					.word 	IRQHandler                          ; irq ($FFFE)

;******  End of listing
