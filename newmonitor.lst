
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -c -b -o monitor.rom -L newmonitor.lst newmonitor.asm
; Sat Sep 24 17:14:40 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: newmonitor.asm

=$fc					zTemp0 = $FC 								; 2 byte memory units.
=6					ClockMhz = 6 								; clock speed in MHz (affects repeat timing)
=1					KeyboardInvert = 1 							; 0 if keyboard active high, 1 if active low.
=$200					StartWorkSpace = $200
=$203					XPosition = $203 							; X Character position
=$204					YPosition = $204 							; Y Character position
=$205					TextColour = $205 							; Text colour
=$206					CurrentPage = $206 							; current I/O page
=$207					LastKey = $207 								; last key press
=$208					KeyStatus = $208 							; status bits for keys, 16 x 8 bits = 128 bits.
=536					EndWorkSpace = $208+16
=80					CWidth = 80 								; display size
=60					CHeight = 60
=1					IOPageRegister = 1 							; select I/O Page

;******  Processing file: vicky.inc

=$d000					MASTER_CTRL_REG_L	    = $D000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$d001					MASTER_CTRL_REG_H	    = $D001
=$d002					VKY_RESERVED_00         = $D002
=$d003					VKY_RESERVED_01         = $D003
=$d004					BORDER_CTRL_REG         = $D004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$01					Border_Ctrl_Enable      = $01
=$d005					BORDER_COLOR_B          = $D005
=$d006					BORDER_COLOR_G          = $D006
=$d007					BORDER_COLOR_R          = $D007
=$d008					BORDER_X_SIZE           = $D008; X-  Values: 0 - 32 (Default: 32)
=$d009					BORDER_Y_SIZE           = $D009; Y- Values 0 -32 (Default: 32)
=$d00a					VKY_RESERVED_02         = $D00A
=$d00b					VKY_RESERVED_03         = $D00B
=$d00c					VKY_RESERVED_04         = $D00C
=$d00d					BACKGROUND_COLOR_B      = $D00D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$d00e					BACKGROUND_COLOR_G      = $D00E
=$d00f					BACKGROUND_COLOR_R      = $D00F ;
=$d010					VKY_TXT_CURSOR_CTRL_REG = $D010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$d011					VKY_TXT_START_ADD_PTR   = $D011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$d012					VKY_TXT_CURSOR_CHAR_REG = $D012
=$d013					VKY_TXT_CURSOR_COLR_REG = $D013
=$d014					VKY_TXT_CURSOR_X_REG_L  = $D014
=$d015					VKY_TXT_CURSOR_X_REG_H  = $D015
=$d016					VKY_TXT_CURSOR_Y_REG_L  = $D016
=$d017					VKY_TXT_CURSOR_Y_REG_H  = $D017
=$d018					VKY_LINE_IRQ_CTRL_REG   = $D018 ;[0] - Enable Line 0 - WRITE ONLY
=$d019					VKY_LINE_CMP_VALUE_LO  = $D019 ;Write Only [7:0]
=$d01a					VKY_LINE_CMP_VALUE_HI  = $D01A ;Write Only [3:0]
=$d018					VKY_PIXEL_X_POS_LO     = $D018 ; This is Where on the video line is the Pixel
=$d019					VKY_PIXEL_X_POS_HI     = $D019 ; Or what pixel is being displayed when the register is read
=$d01a					VKY_LINE_Y_POS_LO      = $D01A ; This is the Line Value of the Raster
=$d01b					VKY_LINE_Y_POS_HI      = $D01B ;
=$d100					TyVKY_BM0_CTRL_REG       = $D100
=$01					BM0_Ctrl                = $01       ; Enable the BM0
=$02					BM0_LUT0                = $02       ; LUT0
=$04					BM0_LUT1                = $04       ; LUT1
=$08					BM0_LUT2                = $08       ; LUT2
=$d101					TyVKY_BM0_START_ADDY_L   = $D101
=$d102					TyVKY_BM0_START_ADDY_M   = $D102
=$d103					TyVKY_BM0_START_ADDY_H   = $D103
=$d108					TyVKY_BM1_CTRL_REG       = $D108
=$01					BM1_Ctrl                = $01       ; Enable the BM0
=$02					BM1_LUT0                = $02       ; LUT0
=$04					BM1_LUT1                = $04       ; LUT1
=$08					BM1_LUT2                = $08       ; LUT2
=$d109					TyVKY_BM1_START_ADDY_L   = $D109
=$d10a					TyVKY_BM1_START_ADDY_M   = $D10A
=$d10b					TyVKY_BM1_START_ADDY_H   = $D10B
=$d200					TyVKY_TL_CTRL0          = $D200
=$d300					TyVKY_TL_MISC           = $D300
=$d800					TEXT_LUT_FG      = $D800
=$d840					TEXT_LUT_BG		 = $D840
=$d000					TyVKY_LUT0              = $D000 ; -$D000 - $D3FF
=$d400					TyVKY_LUT1              = $D400 ; -$D400 - $D7FF
=$d800					TyVKY_LUT2              = $D800 ; -$D800 - $DBFF
=$dc00					TyVKY_LUT3              = $DC00 ; -$DC00 - $DFFF

;******  Return to file: newmonitor.asm


;******  Processing file: interrupt.inc

=$d660					INT_PENDING_REG0 = $D660 ;
=$d661					INT_PENDING_REG1 = $D661 ;
=$d662					INT_PENDING_REG2 = $D662 ; NOT USED
=$d663					INT_PENDING_REG3 = $D663 ; NOT USED
=$d664					INT_POL_REG0     = $D664 ;
=$d665					INT_POL_REG1     = $D665 ;
=$d666					INT_POL_REG2     = $D666 ;  NOT USED
=$d667					INT_POL_REG3     = $D667 ; NOT USED
=$d668					INT_EDGE_REG0    = $D668 ;
=$d669					INT_EDGE_REG1    = $D669 ;
=$d66a					INT_EDGE_REG2    = $D66A ; NOT USED
=$d66b					INT_EDGE_REG3    = $D66B ; NOT USED
=$d66c					INT_MASK_REG0    = $D66C ;
=$d66d					INT_MASK_REG1    = $D66D ;
=$d66e					INT_MASK_REG2    = $D66E ; NOT USED
=$d66f					INT_MASK_REG3    = $D66F ; NOT USED
=$01					JR0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					JR0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					JR0_INT02_KBD        = $04  ;
=$08					JR0_INT03_MOUSE      = $08  ;
=$10					JR0_INT04_TMR0       = $10  ;
=$20					JR0_INT05_TMR1       = $20  ;Real-Time Clock Interrupt
=$40					JR0_INT06_DMA        = $40  ;Floppy Disk Controller
=$80					JR0_INT07_TBD        = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					JR1_INT00_UART       = $01  ;Keyboard Interrupt
=$02					JR1_INT01_COL0       = $02  ;TYVKY Collision TBD
=$04					JR1_INT02_COL1       = $04  ;TYVKY Collision TBD
=$08					JR1_INT03_COL2       = $08  ;TYVKY Collision TBD
=$10					JR1_INT04_RTC        = $10  ;Serial Port 1
=$20					JR1_INT05_VIA        = $20  ;Midi Controller Interrupt
=$40					JR1_INT06_IEC        = $40  ;Parallel Port
=$80					JR1_INT07_SDCARD     = $80  ;SDCard Insert

;******  Return to file: newmonitor.asm

.f000					SelectPage0:
.f000	48		pha			pha
.f001	a5 01		lda $01			lda 	IOPageRegister
.f003	29 fc		and #$fc		and 	#$FC
.f005					SelectPageWrite:
.f005	85 01		sta $01			sta 	IOPageRegister
.f007	8d 06 02	sta $0206		sta 	CurrentPage
.f00a	68		pla			pla
.f00b	60		rts			rts
.f00c					SelectPage1:
.f00c	48		pha			pha
.f00d	a5 01		lda $01			lda 	IOPageRegister
.f00f	29 fc		and #$fc		and 	#$FC
.f011	09 01		ora #$01		ora 	#1
.f013	80 f0		bra $f005		bra 	SelectPageWrite
.f015					SelectPage2:
.f015	48		pha			pha
.f016	a5 01		lda $01			lda 	IOPageRegister
.f018	29 fc		and #$fc		and 	#$FC
.f01a	09 02		ora #$02		ora 	#2
.f01c	80 e7		bra $f005		bra 	SelectPageWrite
.f01e					SelectPage3:
.f01e	48		pha			pha
.f01f	a5 01		lda $01			lda 	IOPageRegister
.f021	09 03		ora #$03		ora 	#3
.f023	80 e0		bra $f005		bra 	SelectPageWrite
.f025					ClearScreen:
.f025	da		phx			phx
.f026	20 1e f0	jsr $f01e		jsr 	SelectPage3
.f029	ad 05 02	lda $0205		lda 	TextColour
.f02c	20 39 f0	jsr $f039		jsr 	_ScreenFill
.f02f	20 15 f0	jsr $f015		jsr 	SelectPage2
.f032	a9 20		lda #$20		lda 	#$20
.f034	20 39 f0	jsr $f039		jsr 	_ScreenFill
.f037	fa		plx			plx
.f038	60		rts			rts
.f039					_ScreenFill:
.f039	48		pha			pha
.f03a	a9 c0		lda #$c0		lda 	#$C0 								; fill D000-D7FF with $60
.f03c	85 fd		sta $fd			sta 	zTemp0+1
.f03e	a9 00		lda #$00		lda 	#$00
.f040	85 fc		sta $fc			sta 	zTemp0
.f042	a0 00		ldy #$00		ldy 	#0
.f044	68		pla			pla
.f045					_CLSLoop:
.f045	91 fc		sta ($fc),y		sta 	(zTemp0),y
.f047	c8		iny			iny
.f048	d0 fb		bne $f045		bne 	_CLSLoop
.f04a	e6 fd		inc $fd			inc 	zTemp0+1
.f04c	a6 fd		ldx $fd			ldx 	zTemp0+1
.f04e	e0 d3		cpx #$d3		cpx 	#$D3
.f050	d0 f3		bne $f045		bne 	_CLSLoop
.f052	20 00 f0	jsr $f000		jsr 	SelectPage0
.f055					HomeCursor:
.f055	a9 00		lda #$00		lda 	#0
.f057	8d 03 02	sta $0203		sta 	xPosition
.f05a	8d 04 02	sta $0204		sta 	yPosition
.f05d	20 61 f0	jsr $f061		jsr 	UpdateCursor
.f060	60		rts			rts
.f061					UpdateCursor:
.f061	48		pha			pha
.f062	ad 03 02	lda $0203		lda 	xPosition
.f065	8d 14 d0	sta $d014		sta 	$D014
.f068	ad 04 02	lda $0204		lda 	yPosition
.f06b	8d 16 d0	sta $d016		sta 	$D016
.f06e	68		pla			pla
.f06f	60		rts			rts
.f070					SetZTemp0CharPos:
.f070	48		pha			pha
.f071	8a		txa			txa
.f072	48		pha			pha
.f073	ad 04 02	lda $0204		lda 	yPosition 						; zTemp0 = yPos
.f076	85 fc		sta $fc			sta 	zTemp0
.f078	a9 00		lda #$00		lda 	#0
.f07a	85 fd		sta $fd			sta 	zTemp0+1
.f07c	a2 06		ldx #$06		ldx 	#6 								; x 80
.f07e					_SZ0Shift:
.f07e	06 fc		asl $fc			asl 	zTemp0
.f080	26 fd		rol $fd			rol 	zTemp0+1
.f082	e0 05		cpx #$05		cpx 	#5
.f084	d0 0c		bne $f092		bne 	_SZ0NoAdd
.f086	18		clc			clc
.f087	a5 fc		lda $fc			lda 	zTemp0
.f089	6d 04 02	adc $0204		adc 	yPosition
.f08c	85 fc		sta $fc			sta 	zTemp0
.f08e	90 02		bcc $f092		bcc 	_SZ0NoAdd
.f090	e6 fd		inc $fd			inc 	zTemp0+1
.f092					_SZ0NoAdd:
.f092	ca		dex			dex
.f093	d0 e9		bne $f07e		bne 	_SZ0Shift
.f095	18		clc			clc
.f096	a5 fc		lda $fc			lda 	zTemp0 							; add in xPos
.f098	6d 03 02	adc $0203		adc 	xPosition
.f09b	85 fc		sta $fc			sta 	zTemp0
.f09d	a5 fd		lda $fd			lda 	zTemp0+1 						; point to page D
.f09f	69 c0		adc #$c0		adc 	#$C0
.f0a1	85 fd		sta $fd			sta 	zTemp0+1
.f0a3	68		pla			pla
.f0a4	aa		tax			tax
.f0a5	68		pla			pla
.f0a6	60		rts			rts
.f0a7					PrintHex:
.f0a7	48		pha			pha
.f0a8	a9 20		lda #$20		lda 	#32
.f0aa	20 ca f0	jsr $f0ca		jsr 	PrintCharacter
.f0ad	68		pla			pla
.f0ae	48		pha			pha
.f0af	48		pha			pha
.f0b0	4a		lsr a			lsr 	a
.f0b1	4a		lsr a			lsr 	a
.f0b2	4a		lsr a			lsr 	a
.f0b3	4a		lsr a			lsr 	a
.f0b4	20 bd f0	jsr $f0bd		jsr 	PrintNibble
.f0b7	68		pla			pla
.f0b8	20 bd f0	jsr $f0bd		jsr 	PrintNibble
.f0bb	68		pla			pla
.f0bc	60		rts			rts
.f0bd					PrintNibble:
.f0bd	29 0f		and #$0f		and 	#15
.f0bf	c9 0a		cmp #$0a		cmp 	#10
.f0c1	90 02		bcc $f0c5		bcc 	_PN0
.f0c3	69 06		adc #$06		adc 	#6
.f0c5					_PN0:
.f0c5	69 30		adc #$30		adc 	#48
.f0c7	4c ca f0	jmp $f0ca		jmp 	PrintCharacter
.f0ca					PrintCharacter:
.f0ca	48		pha			pha
.f0cb	da		phx			phx
.f0cc	5a		phy			phy
.f0cd	a6 01		ldx $01			ldx 	1
.f0cf	da		phx			phx
.f0d0	20 15 f0	jsr $f015		jsr 	SelectPage2
.f0d3	48		pha			pha
.f0d4	c9 08		cmp #$08		cmp 	#8
.f0d6	f0 51		beq $f129		beq 	_PCBackspace
.f0d8	c9 09		cmp #$09		cmp 	#9
.f0da	f0 3f		beq $f11b		beq 	_PCTab
.f0dc	c9 0d		cmp #$0d		cmp 	#13
.f0de	f0 5a		beq $f13a		beq 	_PCCRLF
.f0e0	20 70 f0	jsr $f070		jsr 	SetZTemp0CharPos 				; all other characters
.f0e3	92 fc		sta ($fc)		sta 	(zTemp0)
.f0e5	20 1e f0	jsr $f01e		jsr 	SelectPage3
.f0e8	ad 05 02	lda $0205		lda 	TextColour
.f0eb	92 fc		sta ($fc)		sta 	(zTemp0)
.f0ed	20 15 f0	jsr $f015		jsr 	SelectPage2
.f0f0	ee 03 02	inc $0203		inc 	xPosition
.f0f3	ad 03 02	lda $0203		lda 	xPosition
.f0f6	c9 50		cmp #$50		cmp  	#CWidth
.f0f8	d0 13		bne $f10d		bne 	_PCNotRight
.f0fa	9c 03 02	stz $0203		stz 	xPosition
.f0fd	ee 04 02	inc $0204		inc 	yPosition
.f100	ad 04 02	lda $0204		lda 	yPosition
.f103	c9 3c		cmp #$3c		cmp 	#CHeight
.f105	d0 06		bne $f10d		bne 	_PCNotRight
.f107	ce 04 02	dec $0204		dec 	yPosition
.f10a	20 47 f1	jsr $f147		jsr 	ScrollScreenUp
.f10d					_PCNotRight:
.f10d	20 00 f0	jsr $f000		jsr 	SelectPage0
.f110	20 61 f0	jsr $f061		jsr 	UpdateCursor
.f113	68		pla			pla
.f114	fa		plx			plx
.f115	86 01		stx $01			stx 	1
.f117	7a		ply			ply
.f118	fa		plx			plx
.f119	68		pla			pla
.f11a	60		rts			rts
.f11b					_PCTab:
.f11b	a9 20		lda #$20		lda 	#' '
.f11d	20 ca f0	jsr $f0ca		jsr 	PrintCharacter
.f120	ad 03 02	lda $0203		lda 	xPosition
.f123	29 07		and #$07		and 	#7
.f125	d0 f4		bne $f11b		bne 	_PCTab
.f127	80 e4		bra $f10d		bra 	_PCNotRight
.f129					_PCBackspace:
.f129	ad 03 02	lda $0203		lda 	xPosition
.f12c	f0 df		beq $f10d		beq 	_PCNotRight
.f12e	ce 03 02	dec $0203		dec 	xPosition
.f131	20 70 f0	jsr $f070		jsr 	SetZTemp0CharPos
.f134	a9 20		lda #$20		lda 	#' '
.f136	92 fc		sta ($fc)		sta 	(zTemp0)
.f138	80 d3		bra $f10d		bra 	_PCNotRight
.f13a					_PCCRLF:
.f13a	a9 20		lda #$20		lda 	#$20 							; fill with EOL $20
.f13c	20 ca f0	jsr $f0ca		jsr 	PrintCharacter
.f13f	ad 03 02	lda $0203		lda 	xPosition 						; until back at left
.f142	d0 f6		bne $f13a		bne 	_PCCRLF
.f144	80 c7		bra $f10d		bra 	_PCNotRight
.f146					NMIHandler:
.f146	40		rti				rti
.f147					ScrollScreenUp:
.f147	98		tya			tya
.f148	48		pha			pha
.f149	20 1e f0	jsr $f01e		jsr 	SelectPage3
.f14c	20 75 f1	jsr $f175		jsr 	_ScrollBank
.f14f	ad 05 02	lda $0205		lda 	TextColour
.f152	20 63 f1	jsr $f163		jsr 	_WriteBottomLine
.f155	20 15 f0	jsr $f015		jsr 	SelectPage2
.f158	20 75 f1	jsr $f175		jsr 	_ScrollBank
.f15b	a9 20		lda #$20		lda 	#32
.f15d	20 63 f1	jsr $f163		jsr 	_WriteBottomLine
.f160	68		pla			pla
.f161	a8		tay			tay
.f162	60		rts			rts
.f163					_WriteBottomLine
.f163	48		pha			pha
.f164	a9 70		lda #$70		lda 	#$70
.f166	85 fc		sta $fc			sta 	zTemp0
.f168	a9 d2		lda #$d2		lda 	#$D2
.f16a	85 fd		sta $fd			sta 	zTemp0+1
.f16c	a0 4f		ldy #$4f		ldy 	#CWidth-1
.f16e	68		pla			pla
.f16f					_ScrollBottomLine:
.f16f	91 fc		sta ($fc),y		sta 	(zTemp0),y
.f171	88		dey			dey
.f172	10 fb		bpl $f16f		bpl 	_ScrollBottomLine
.f174	60		rts			rts
.f175					_ScrollBank
.f175	a9 c0		lda #$c0		lda 	#$C0
.f177	85 fd		sta $fd			sta 	zTemp0+1
.f179	a9 00		lda #$00		lda 	#$00
.f17b	85 fc		sta $fc			sta 	zTemp0
.f17d	a0 50		ldy #$50		ldy 	#CWidth
.f17f					_ScrollLoop:
.f17f	b1 fc		lda ($fc),y		lda 	(zTemp0),y
.f181	92 fc		sta ($fc)		sta 	(zTemp0)
.f183	e6 fc		inc $fc			inc 	zTemp0
.f185	d0 f8		bne $f17f		bne 	_ScrollLoop
.f187	e6 fd		inc $fd			inc 	zTemp0+1
.f189	a5 fd		lda $fd			lda 	zTemp0+1
.f18b	c9 d3		cmp #$d3		cmp 	#$D3
.f18d	d0 f0		bne $f17f		bne 	_ScrollLoop
.f18f	60		rts			rts
.f190					ControlCCheck:
.f190	ad 0a 02	lda $020a		lda 	KeyStatus+2 				; check LCtrl pressed
.f193	29 10		and #$10		and 	#$10
.f195	f0 08		beq $f19f		beq 	Exit2
.f197	ad 0c 02	lda $020c		lda 	KeyStatus+4 				; check C pressed
.f19a	29 02		and #$02		and 	#$02 						; non-zero if so
.f19c	49 02		eor #$02		eor 	#$02 				 		; Z set if so.
.f19e	60		rts			rts
.f19f					Exit2:
.f19f	a9 ff		lda #$ff		lda 	#$FF 						; NZ set
.f1a1	60		rts			rts
.f1a2					HandleKeyboard:
.f1a2	48		pha				pha
.f1a3	da		phx				phx
.f1a4	5a		phy				phy
.f1a5	48		pha				pha 									; save new code
.f1a6	48		pha				pha 									; 2nd save
.f1a7	48		pha				pha 									; 3rd save
.f1a8	29 7f		and #$7f			and 	#$7F
.f1aa	4a		lsr a				lsr 	a 								; divide by 8 -> X, offset in table
.f1ab	4a		lsr a				lsr 	a
.f1ac	4a		lsr a				lsr 	a
.f1ad	aa		tax				tax
.f1ae	68		pla				pla 									; restore 3rd save
.f1af	29 07		and #$07			and 	#7 								; count in Y
.f1b1	a8		tay				tay
.f1b2	a9 00		lda #$00			lda 	#0
.f1b4	38		sec				sec
.f1b5					_HKGetBits:
.f1b5	2a		rol a				rol 	a
.f1b6	88		dey				dey
.f1b7	10 fc		bpl $f1b5			bpl 	_HKGetBits
.f1b9	7a		ply				ply 									; restore 2nd save
.f1ba	30 05		bmi $f1c1			bmi 	_HKRelease
.f1bc	1d 08 02	ora $0208,x			ora 	KeyStatus,x  					; set bit
.f1bf	80 05		bra $f1c6			bra 	_HKWrite
.f1c1					_HKRelease:
.f1c1	49 ff		eor #$ff			eor 	#$FF 							; clear bit
.f1c3	3d 08 02	and $0208,x			and 	KeyStatus,x
.f1c6					_HKWrite:
.f1c6	9d 08 02	sta $0208,x			sta 	KeyStatus,x
.f1c9	68		pla				pla 									; restore new code
.f1ca	30 03		bmi $f1cf			bmi 	_HKExit
.f1cc	20 d3 f1	jsr $f1d3			jsr 	ConvertInsertKey
.f1cf					_HKExit:
.f1cf	7a		ply				ply
.f1d0	fa		plx				plx
.f1d1	68		pla				pla
.f1d2	60		rts				rts
.f1d3					ConvertInsertKey:
.f1d3	aa		tax				tax 								; scan code in X
.f1d4	bd c2 f8	lda $f8c2,x			lda 	ASCIIFromScanCode,x 		; get ASCII unshifted
.f1d7	f0 39		beq $f212			beq 	_CIKExit 					; key not known
.f1d9	a8		tay				tay 								; save in Y
.f1da	30 2a		bmi $f206			bmi 	_CIKEndShiftCheck 			; if bit 7 was set shift doesn't affect this.
.f1dc	ad 0d 02	lda $020d			lda 	KeyStatus+5 				; check left shift
.f1df	29 04		and #$04			and 	#4
.f1e1	d0 07		bne $f1ea			bne 	_CIKShift
.f1e3	ad 0e 02	lda $020e			lda 	KeyStatus+6 				; check right shift
.f1e6	29 40		and #$40			and 	#$40
.f1e8	f0 1c		beq $f206			beq 	_CIKEndShiftCheck
.f1ea					_CIKShift:
.f1ea	a2 fe		ldx #$fe			ldx 	#254 						; check shift table.
.f1ec					_CIKShiftNext:
.f1ec	e8		inx				inx
.f1ed	e8		inx				inx
.f1ee	3c 53 f9	bit $f953,x			bit  	ShiftFixTable,x 			; end of table ?
.f1f1	30 0b		bmi $f1fe			bmi 	_CIDefaultShift
.f1f3	98		tya				tya 								; found a match ?
.f1f4	dd 53 f9	cmp $f953,x			cmp 	ShiftFixTable,x
.f1f7	d0 f3		bne $f1ec			bne 	_CIKShiftNext
.f1f9	bc 54 f9	ldy $f954,x			ldy 	ShiftFixTable+1,x 			; get replacement
.f1fc	80 08		bra $f206			bra 	_CIKEndShiftCheck
.f1fe					_CIDefaultShift:
.f1fe	c9 20		cmp #$20			cmp 	#32
.f200	90 04		bcc $f206			bcc 	_CIKEndShiftCheck
.f202	98		tya				tya 								; default shift.
.f203	49 20		eor #$20			eor 	#32
.f205	a8		tay				tay
.f206					_CIKEndShiftCheck:
.f206	ad 0b 02	lda $020b			lda 	KeyStatus+3 				; check LCtrl pressed
.f209	29 20		and #$20			and 	#$20
.f20b	f0 04		beq $f211			beq 	_CIKNotControl
.f20d	98		tya				tya 								; lower 5 bits only on control.
.f20e	29 1f		and #$1f			and 	#31
.f210	a8		tay				tay
.f211					_CIKNotControl:
.f211	98		tya				tya
.f212					_CIKExit:
.f212	8d 07 02	sta $0207			sta 	LastKey
.f215	60		rts				rts
.f216					NewReadKeyboard:
.f216	ad 07 02	lda $0207			lda 	LastKey 					; wait for key press
.f219	f0 fb		beq $f216			beq 	NewReadKeyboard
.f21b	9c 07 02	stz $0207			stz 	LastKey 					; clear queue
.f21e	60		rts				rts
.f21f					FakeKeyboardRead:
.f21f	20 16 f2	jsr $f216			jsr 	NewReadKeyboard 			; echo everything except CR, makes
.f222	c9 0d		cmp #$0d			cmp 	#13 						; it behave like the C64 with it's
.f224	f0 03		beq $f229			beq 	_FKRExit 					; line editing
.f226	20 ca f0	jsr $f0ca			jsr 	PrintCharacter
.f229					_FKRExit:
.f229	60		rts				rts
.f22a					GetKeyIfPressed:
.f22a	ad 07 02	lda $0207			lda 	LastKey 					; key or zero in A
.f22d	9c 07 02	stz $0207			stz 	LastKey 					; consume if pressed, no op if not.
.f230	09 00		ora #$00			ora 	#0 							; set Z and return
.f232	60		rts				rts
.f233					SystemReset:
.f233	a2 ff		ldx #$ff		ldx		#$FF
.f235	9a		txs			txs
.f236	78		sei			sei
.f237	a9 80		lda #$80		lda 	#$80
.f239	85 00		sta $00			sta 	0
.f23b	a2 07		ldx #$07		ldx 	#7
.f23d					_SRInitLut:
.f23d	8a		txa			txa
.f23e	95 08		sta $08,x		sta 	8,x
.f240	ca		dex			dex
.f241	10 fa		bpl $f23d		bpl 	_SRInitLut
.f243	64 00		stz $00			stz 	0
.f245	a2 18		ldx #$18		ldx 	#EndWorkSpace-StartWorkSpace
.f247					_SRClear:
.f247	9e ff 01	stz $01ff,x		stz 	StartWorkSpace-1,x
.f24a	ca		dex			dex
.f24b	e0 ff		cpx #$ff		cpx 	#$FF
.f24d	d0 f8		bne $f247		bne 	_SRClear
.f24f	20 00 f0	jsr $f000		jsr 	SelectPage0
.f252	a9 ff		lda #$ff	    LDA #$FF
.f254	8d 68 d6	sta $d668	    STA INT_EDGE_REG0
.f257	8d 69 d6	sta $d669	    STA INT_EDGE_REG1
.f25a	8d 6c d6	sta $d66c	    STA INT_MASK_REG0
.f25d	8d 6d d6	sta $d66d	    STA INT_MASK_REG1
.f260	ad 60 d6	lda $d660	    lda INT_PENDING_REG0
.f263	8d 60 d6	sta $d660	    sta INT_PENDING_REG0
.f266	ad 61 d6	lda $d661	    lda INT_PENDING_REG1
.f269	8d 61 d6	sta $d661	    sta INT_PENDING_REG1
.f26c	20 e2 f2	jsr $f2e2		jsr 	TinyVickyInitialise
.f26f	20 2b f3	jsr $f32b		jsr 	Init_Text_LUT
.f272	20 a1 f4	jsr $f4a1		jsr 	LoadGraphicsLUT
.f275	20 25 f0	jsr $f025		jsr 	ClearScreen
.f278	ee 04 02	inc $0204		inc 	yPosition
.f27b	ee 04 02	inc $0204		inc 	yPosition
.f27e	a9 c8		lda #$c8	    lda #200
.f280	8d 19 d0	sta $d019	    sta VKY_LINE_CMP_VALUE_LO
.f283	a9 00		lda #$00	    lda #0
.f285	8d 1a d0	sta $d01a	    sta VKY_LINE_CMP_VALUE_HI
.f288	a9 01		lda #$01	    lda #$01
.f28a	8d 18 d0	sta $d018	    sta VKY_LINE_IRQ_CTRL_REG
.f28d	78		sei		    SEI
.f28e	ad 60 d6	lda $d660	    lda INT_PENDING_REG0  ; Read the Pending Register &
.f291	29 02		and #$02	    and #JR0_INT01_SOL
.f293	8d 60 d6	sta $d660	    sta INT_PENDING_REG0  ; Writing it back will clear the Active Bit
.f296	ad 6c d6	lda $d66c	    lda INT_MASK_REG0
.f299	29 fd		and #$fd	    and #~JR0_INT01_SOL
.f29b	8d 6c d6	sta $d66c	    sta INT_MASK_REG0
.f29e	ad 60 d6	lda $d660	    lda INT_PENDING_REG0  ; Read the Pending Register &
.f2a1	29 04		and #$04	    and #JR0_INT02_KBD
.f2a3	8d 60 d6	sta $d660	    sta INT_PENDING_REG0  ; Writing it back will clear the Active Bit
.f2a6	ad 6c d6	lda $d66c	    lda INT_MASK_REG0
.f2a9	29 fb		and #$fb	    and #~JR0_INT02_KBD
.f2ab	8d 6c d6	sta $d66c	    sta INT_MASK_REG0
.f2ae	20 00 f0	jsr $f000		jsr 	SelectPage0
.f2b1	a9 01		lda #$01		lda 	#1
.f2b3	8d 00 d1	sta $d100		sta 	$D100
.f2b6	9c 01 d1	stz $d101		stz 	$D101
.f2b9	9c 02 d1	stz $d102		stz 	$D102
.f2bc	9c 03 d1	stz $d103		stz 	$D103
.f2bf	ee 00 07	inc $0700		inc 	$700
.f2c2	ad 00 07	lda $0700		lda 	$700
.f2c5	29 0f		and #$0f		and 	#15
.f2c7	09 40		ora #$40		ora 	#64
.f2c9	20 d2 ff	jsr $ffd2		jsr 	$FFD2
.f2cc	20 d2 ff	jsr $ffd2		jsr 	$FFD2
.f2cf	20 da f3	jsr $f3da		jsr 	INITKEYBOARD
.f2d2	58		cli			cli
.f2d3	4c 00 80	jmp $8000		jmp 	$8000
.f2d6					NextChar:
.f2d6	20 16 f2	jsr $f216		jsr 	NewReadKeyboard
.f2d9	20 a7 f0	jsr $f0a7		jsr 	PrintHex
.f2dc	20 ca f0	jsr $f0ca		jsr 	PrintCharacter
.f2df	4c d6 f2	jmp $f2d6		jmp 	NextChar

;******  Processing file: hardware.asm

.f2e2					TinyVickyInitialise:
.f2e2	a9 01		lda #$01	            lda # Mstr_Ctrl_Text_Mode_En        ; Text on, Overlay,Graphic,Bitmap,Tilemap,Sprite,Gamma,Disable off.
.f2e4	8d 00 d0	sta $d000	            sta MASTER_CTRL_REG_L               ; Register $D000 in page 0
.f2e7	ad 00 d0	lda $d000	            lda MASTER_CTRL_REG_L
.f2ea	a9 01		lda #$01	            lda #Border_Ctrl_Enable             ; Enable border
.f2ec	8d 04 d0	sta $d004	            sta BORDER_CTRL_REG                 ; Register $D004 in page 0
.f2ef	a9 80		lda #$80	            lda #$80                            ; set border colour to $804000
.f2f1	8d 05 d0	sta $d005	            sta BORDER_COLOR_B                  ; (registers $D005..$D007)
.f2f4	a9 00		lda #$00	            lda #$00
.f2f6	8d 06 d0	sta $d006	            sta BORDER_COLOR_G
.f2f9	a9 00		lda #$00	            lda #$00
.f2fb	8d 07 d0	sta $d007	            sta BORDER_COLOR_R
.f2fe	a9 10		lda #$10	            lda #16                             ; border size (offset from top left ?)
.f300	8d 08 d0	sta $d008	            sta BORDER_X_SIZE                   ; (registers $D008 .. $D009)
.f303	8d 09 d0	sta $d009	            sta BORDER_Y_SIZE
.f306	a9 05		lda #$05	            lda #Vky_Cursor_Enable | Vky_Cursor_Flash_Rate1
.f308	8d 10 d0	sta $d010	            sta VKY_TXT_CURSOR_CTRL_REG         ; turn cursor on ($D010)
.f30b	a9 06		lda #$06	            lda #6
.f30d	8d 12 d0	sta $d012	            sta VKY_TXT_CURSOR_CHAR_REG         ; 160 is 128+32 so inverse space. ($D012)
.f310	a9 1c		lda #$1c	            lda #28
.f312	8d 13 d0	sta $d013	            sta VKY_TXT_CURSOR_COLR_REG         ; colour $2 $8 ($D013)
.f315	a9 00		lda #$00	            lda #0                              ; cursor to (0,5)
.f317	8d 14 d0	sta $d014	            sta VKY_TXT_CURSOR_X_REG_L          ; ($D014 .. $D017)
.f31a	8d 15 d0	sta $d015	            sta VKY_TXT_CURSOR_X_REG_H
.f31d	8d 17 d0	sta $d017	            sta VKY_TXT_CURSOR_Y_REG_H
.f320	a9 05		lda #$05	            lda #5
.f322	8d 16 d0	sta $d016	            sta VKY_TXT_CURSOR_Y_REG_L
.f325	a9 ec		lda #$ec	            lda		#$EC 						; set text colour.
.f327	8d 05 02	sta $0205	            sta 	TextColour
.f32a	60		rts		            rts
.f32b					Init_Text_LUT
.f32b	a2 00		ldx #$00	                LDX #$00
.f32d	bd 46 f3	lda $f346,x	lutinitloop0    LDA fg_color_lut,x      ; get Local Data
.f330	9d 00 d8	sta $d800,x	                sta TEXT_LUT_FG,x   ; Write in LUT Memory ($D800)
.f333	e8		inx		                inx
.f334	e0 40		cpx #$40	                cpx #$40
.f336	d0 f5		bne $f32d	                bne lutinitloop0
.f338	a2 00		ldx #$00	                LDX #$00
.f33a	bd 86 f3	lda $f386,x	lutinitloop1    LDA bg_color_lut,x      ; get Local Data
.f33d	9d 40 d8	sta $d840,x	                STA TEXT_LUT_BG,x   ; Write in LUT Memory ($D840)
.f340	e8		inx		                INX
.f341	e0 40		cpx #$40	                CPX #$40
.f343	d0 f5		bne $f33a	                bne lutinitloop1
.f345	60		rts		                RTS
>f346	00 00 00 ff			fg_color_lut    .text $00, $00, $00, $FF
>f34a	00 00 80 ff			                .text $00, $00, $80, $FF        ; blue
>f34e	00 80 00 ff			                .text $00, $80, $00, $FF        ; green
>f352	80 00 00 ff			                .text $80, $00, $00, $FF        ; red
>f356	00 80 80 ff			                .text $00, $80, $80, $FF        ; yellow (etc.)
>f35a	80 80 00 ff			                .text $80, $80, $00, $FF
>f35e	80 00 80 ff			                .text $80, $00, $80, $FF
>f362	80 80 80 ff			                .text $80, $80, $80, $FF
>f366	00 45 ff ff			                .text $00, $45, $FF, $FF
>f36a	13 45 8b ff			                .text $13, $45, $8B, $FF
>f36e	00 00 20 ff			                .text $00, $00, $20, $FF
>f372	00 20 00 ff			                .text $00, $20, $00, $FF
>f376	20 00 00 ff			                .text $20, $00, $00, $FF
>f37a	20 20 20 ff			                .text $20, $20, $20, $FF
>f37e	ff 80 00 ff			                .text $FF, $80, $00, $FF
>f382	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>f386	00 00 00 ff			bg_color_lut    .text $00, $00, $00, $FF  ;BGRA
>f38a	aa 00 00 ff			                .text $AA, $00, $00, $FF
>f38e	00 80 00 ff			                .text $00, $80, $00, $FF
>f392	00 00 80 ff			                .text $00, $00, $80, $FF
>f396	00 20 20 ff			                .text $00, $20, $20, $FF
>f39a	20 20 00 ff			                .text $20, $20, $00, $FF
>f39e	20 00 20 ff			                .text $20, $00, $20, $FF
>f3a2	20 20 20 ff			                .text $20, $20, $20, $FF
>f3a6	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>f3aa	13 45 8b ff			                .text $13, $45, $8B, $FF
>f3ae	00 00 20 ff			                .text $00, $00, $20, $FF
>f3b2	00 20 00 ff			                .text $00, $20, $00, $FF
>f3b6	40 00 00 ff			                .text $40, $00, $00, $FF
>f3ba	10 10 10 ff			                .text $10, $10, $10, $FF
>f3be	40 40 40 ff			                .text $40, $40, $40, $FF
>f3c2	ff ff ff ff			                .text $FF, $FF, $FF, $FF
=$d644					STATUS_PORT     = $D644;
=$d644					KBD_CMD_BUF     = $D644;
=$d640					KBD_OUT_BUF     = $D640;
=$d640					KBD_INPT_BUF    = $D640;
=$d640					KBD_DATA_BUF    = $D640;
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL   = $02
=$04					SYS_FLAG        = $04
=$08					CMD_DATA        = $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT     = $20
=$40					RCV_TMOUT       = $40
=$80					PARITY_EVEN     = $80
=$10					INH_KEYBOARD    = $10
=$ae					KBD_ENA         = $AE
=$ad					KBD_DIS         = $AD
.f3c6	ad 44 d6	lda $d644	Poll_Inbuf      lda STATUS_PORT     ; Load Status Byte
.f3c9	29 02		and #$02	                and #INPT_BUF_FULL  ; Test bit $02 (if 0, Empty)
.f3cb	c9 02		cmp #$02	                cmp #INPT_BUF_FULL
.f3cd	f0 f7		beq $f3c6	                beq Poll_Inbuf
.f3cf	60		rts		                rts
.f3d0	ad 44 d6	lda $d644	Poll_Outbuf     lda STATUS_PORT
.f3d3	29 01		and #$01	                and #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.f3d5	c9 01		cmp #$01	                cmp #OUT_BUF_FULL
.f3d7	d0 f7		bne $f3d0	                bne Poll_Outbuf
.f3d9	60		rts		                rts
.f3da	18		clc		INITKEYBOARD    clc
.f3db	a9 aa		lda #$aa	                lda #$AA                    ; Send self test command
.f3dd	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.f3e0	20 d0 f3	jsr $f3d0	                jsr Poll_Outbuf             ; Sent Self-Test Code and Waiting for Return value, it ought to be 0x55.
.f3e3	ad 40 d6	lda $d640	                lda KBD_OUT_BUF             ; Check self test result
.f3e6	c9 55		cmp #$55	                cmp #$55
.f3e8	f0 03		beq $f3ed	                beq passAAtest
.f3ea	4c 78 f4	jmp $f478	                jmp initkb_loop_out
.f3ed	20 15 f0	jsr $f015	passAAtest      jsr SelectPage2              ; put chr$(31) "1" on top left of screen
.f3f0	a9 31		lda #$31	                lda #$31
.f3f2	8d 00 c0	sta $c000	                sta $C000
.f3f5	20 00 f0	jsr $f000	                jsr SelectPage0
.f3f8	20 c6 f3	jsr $f3c6	                jsr Poll_Inbuf
.f3fb	a9 ab		lda #$ab	                lda #$AB                     ;Send test Interface command
.f3fd	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.f400	20 d0 f3	jsr $f3d0	                jsr Poll_Outbuf ;
.f403					TryAgainAB:
.f403	ad 40 d6	lda $d640	                lda KBD_OUT_BUF               ;Display Interface test results
.f406	c9 00		cmp #$00	                cmp #$00                      ;Should be 00
.f408	f0 10		beq $f41a	                beq passABtest
.f40a	d0 f7		bne $f403	                bne TryAgainAB
.f40c	20 15 f0	jsr $f015	                jsr SelectPage2                 ; not reachable
.f40f	a9 23		lda #$23	                lda #$23
.f411	8d 05 c0	sta $c005	                sta $C005
.f414	20 00 f0	jsr $f000	                jsr SelectPage0
.f417	4c 78 f4	jmp $f478	                jmp initkb_loop_out
.f41a	20 15 f0	jsr $f015	passABtest      jsr SelectPage2                  ; put "2" on top left, 2nd character
.f41d	a9 32		lda #$32	                lda #$32
.f41f	8d 01 c0	sta $c001	                sta $C001
.f422	20 00 f0	jsr $f000	                jsr SelectPage0
.f425	a9 60		lda #$60	                lda #$60                        ; Send Command 0x60 so to Enable Interrupt
.f427	8d 44 d6	sta $d644	                sta KBD_CMD_BUF
.f42a	20 c6 f3	jsr $f3c6	                jsr Poll_Inbuf
.f42d	a9 41		lda #$41	                lda #%01000001                  ; Enable Interrupt (keyboard) and parallel port (?)
.f42f	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.f432	20 15 f0	jsr $f015	                jsr SelectPage2                  ; put "3" on 3rd character
.f435	a9 33		lda #$33	                lda #$33
.f437	8d 02 c0	sta $c002	                sta $C002
.f43a	20 00 f0	jsr $f000	                jsr SelectPage0
.f43d	20 c6 f3	jsr $f3c6	                jsr Poll_Inbuf;
.f440	a9 ff		lda #$ff	                lda #$FF      ; Send Keyboard Reset command
.f442	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.f445	a0 ff		ldy #$ff	                 ldy #$FF
.f447	a2 ff		ldx #$ff	DLY_LOOP2       ldx #$FF
.f449	ca		dex		DLY_LOOP1       dex
.f44a	ea		nop		                nop
.f44b	ea		nop		                nop
.f44c	ea		nop		                nop
.f44d	ea		nop		                nop
.f44e	e0 00		cpx #$00	                cpx #$00
.f450	d0 f7		bne $f449	                bne DLY_LOOP1
.f452	88		dey		                dey
.f453	c0 00		cpy #$00	                cpy #$00
.f455	d0 f0		bne $f447	                bne DLY_LOOP2
.f457	ea		nop		                nop
.f458	20 d0 f3	jsr $f3d0	                jsr Poll_Outbuf ;
.f45b	ad 40 d6	lda $d640	                lda KBD_OUT_BUF                 ; Read Output Buffer
.f45e	20 15 f0	jsr $f015	                jsr SelectPage2                     ;
.f461	a9 34		lda #$34	                lda #$34                        ; put "4" in fourth slot.
.f463	8d 03 c0	sta $c003	                sta $C003
.f466	20 00 f0	jsr $f000	                jsr SelectPage0
.f469					DO_CMD_F4_AGAIN
.f469	20 c6 f3	jsr $f3c6	                jsr Poll_Inbuf ;
.f46c	a9 f4		lda #$f4	                lda #$F4                        ; Enable the Keyboard
.f46e	8d 40 d6	sta $d640	                sta KBD_DATA_BUF
.f471	20 d0 f3	jsr $f3d0	                jsr Poll_Outbuf ;
.f474	ad 40 d6	lda $d640	                lda KBD_OUT_BUF                  ; Clear the Output buffer
.f477	60		rts		                rts
.f478					initkb_loop_out
.f478	60		rts		                rts
.f479					IRQHandler
.f479	48		pha		                pha
.f47a	a5 01		lda $01		                lda     1
.f47c	48		pha		                pha
.f47d	29 f8		and #$f8	                and     #$F8
.f47f	85 01		sta $01		                sta     1
.f481	ad 60 d6	lda $d660	                LDA INT_PENDING_REG0                ; received Keyboard interrupt ?
.f484	29 04		and #$04	                AND #JR0_INT02_KBD
.f486	c9 04		cmp #$04	                CMP #JR0_INT02_KBD
.f488	d0 06		bne $f490	                BNE EXIT_IRQ_HANDLE
.f48a	ad 40 d6	lda $d640	                LDA KBD_INPT_BUF                    ; Get Scan Code from KeyBoard
.f48d	20 a2 f1	jsr $f1a2	                jsr     HandleKeyboard
.f490					EXIT_IRQ_HANDLE:
.f490	ad 60 d6	lda $d660	                lda INT_PENDING_REG0
.f493	8d 60 d6	sta $d660	                sta INT_PENDING_REG0
.f496	ad 61 d6	lda $d661	                lda INT_PENDING_REG1
.f499	8d 61 d6	sta $d661	                sta INT_PENDING_REG1
.f49c	68		pla		                pla
.f49d	85 01		sta $01		                sta     1
.f49f	68		pla		                pla
.f4a0	40		rti		                rti
.f4a1					LoadGraphicsLUT:
.f4a1	20 0c f0	jsr $f00c	            jsr     SelectPage1
.f4a4	a2 00		ldx #$00	            ldx     #0
.f4a6	bd c2 f4	lda $f4c2,x	_LGLLoop:   lda     _GraphicsLUT,x
.f4a9	9d 00 d0	sta $d000,x	            sta     TyVKY_LUT0,x
.f4ac	bd c2 f5	lda $f5c2,x	            lda     _GraphicsLUT+256,x
.f4af	9d 00 d1	sta $d100,x	            sta     TyVKY_LUT0+256,x
.f4b2	bd c2 f6	lda $f6c2,x	            lda     _GraphicsLUT+512,x
.f4b5	9d 00 d2	sta $d200,x	            sta     TyVKY_LUT0+512,x
.f4b8	bd c2 f7	lda $f7c2,x	            lda     _GraphicsLUT+768,x
.f4bb	9d 00 d3	sta $d300,x	            sta     TyVKY_LUT0+768,x
.f4be	ca		dex		            dex
.f4bf	d0 e5		bne $f4a6	            bne     _LGLLoop
.f4c1	60		rts		            rts
.f4c2					_GraphicsLUT:
>f4c2	00 00 00 00 aa 00 00 00		            .binary    "gfxlut.palette"
>f4ca	00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>f4da	00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>f4ea	55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>f4fa	55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>f50a	20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>f51a	65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>f52a	aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>f53a	ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>f54a	ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>f55a	82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>f56a	00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>f57a	00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>f58a	82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>f59a	ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>f5aa	ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>f5ba	be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>f5ca	82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>f5da	82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>f5ea	be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>f5fa	ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>f60a	ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>f61a	df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>f62a	ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>f63a	ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>f64a	df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>f65a	ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>f66a	71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>f67a	39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>f68a	00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>f69a	00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>f6aa	39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>f6ba	71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>f6ca	71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>f6da	55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>f6ea	39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>f6fa	39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>f70a	55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>f71a	71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>f72a	71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>f73a	61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>f74a	51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>f75a	51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>f76a	61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>f77a	71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>f78a	41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>f79a	20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>f7aa	00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>f7ba	00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>f7ca	20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>f7da	41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>f7ea	41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>f7fa	31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>f80a	20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>f81a	20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>f82a	31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>f83a	41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>f84a	41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>f85a	35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>f86a	2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>f87a	2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>f88a	35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>f89a	41 35 2d 00 41 31 2d 00 00 00 00 00 00 00 00 00
>f8aa	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>f8ba	00 00 00 00 00 00 00 00

;******  Return to file: newmonitor.asm


;******  Processing file: ps2convert.inc

.f8c2					ASCIIFromScanCode:
>f8c2	00					.byte	$00 ; $00
>f8c3	4c					.byte	$4c ; $01 Esc
>f8c4	31					.byte	$31 ; $02 1
>f8c5	32					.byte	$32 ; $03 2
>f8c6	33					.byte	$33 ; $04 3
>f8c7	34					.byte	$34 ; $05 4
>f8c8	35					.byte	$35 ; $06 5
>f8c9	36					.byte	$36 ; $07 6
>f8ca	37					.byte	$37 ; $08 7
>f8cb	38					.byte	$38 ; $09 8
>f8cc	39					.byte	$39 ; $0a 9
>f8cd	30					.byte	$30 ; $0b 0
>f8ce	2d					.byte	$2d ; $0c -
>f8cf	3d					.byte	$3d ; $0d =
>f8d0	08					.byte	$08 ; $0e Backspace
>f8d1	09					.byte	$09 ; $0f Tab
>f8d2	71					.byte	$71 ; $10 q
>f8d3	77					.byte	$77 ; $11 w
>f8d4	65					.byte	$65 ; $12 e
>f8d5	72					.byte	$72 ; $13 r
>f8d6	74					.byte	$74 ; $14 t
>f8d7	79					.byte	$79 ; $15 y
>f8d8	75					.byte	$75 ; $16 u
>f8d9	69					.byte	$69 ; $17 i
>f8da	6f					.byte	$6f ; $18 o
>f8db	70					.byte	$70 ; $19 p
>f8dc	5b					.byte	$5b ; $1a [
>f8dd	5d					.byte	$5d ; $1b ]
>f8de	0d					.byte	$0d ; $1c Enter
>f8df	00					.byte	$00 ; $1d Left Ctrl
>f8e0	61					.byte	$61 ; $1e a
>f8e1	73					.byte	$73 ; $1f s
>f8e2	64					.byte	$64 ; $20 d
>f8e3	66					.byte	$66 ; $21 f
>f8e4	67					.byte	$67 ; $22 g
>f8e5	68					.byte	$68 ; $23 h
>f8e6	6a					.byte	$6a ; $24 j
>f8e7	6b					.byte	$6b ; $25 k
>f8e8	6c					.byte	$6c ; $26 l
>f8e9	3b					.byte	$3b ; $27 ;
>f8ea	27					.byte	$27 ; $28 '
>f8eb	00					.byte	$00 ; $29
>f8ec	00					.byte	$00 ; $2a Left Shift
>f8ed	00					.byte	$00 ; $2b
>f8ee	7a					.byte	$7a ; $2c z
>f8ef	78					.byte	$78 ; $2d x
>f8f0	63					.byte	$63 ; $2e c
>f8f1	76					.byte	$76 ; $2f v
>f8f2	62					.byte	$62 ; $30 b
>f8f3	6e					.byte	$6e ; $31 n
>f8f4	6d					.byte	$6d ; $32 m
>f8f5	2c					.byte	$2c ; $33 ,
>f8f6	2e					.byte	$2e ; $34 .
>f8f7	2f					.byte	$2f ; $35 /
>f8f8	00					.byte	$00 ; $36 Right Shift
>f8f9	00					.byte	$00 ; $37
>f8fa	00					.byte	$00 ; $38 Left Alt
>f8fb	20					.byte	$20 ; $39 Space
>f8fc	00					.byte	$00 ; $3a
>f8fd	00					.byte	$00 ; $3b
>f8fe	00					.byte	$00 ; $3c
>f8ff	00					.byte	$00 ; $3d
>f900	00					.byte	$00 ; $3e
>f901	00					.byte	$00 ; $3f
>f902	00					.byte	$00 ; $40
>f903	00					.byte	$00 ; $41
>f904	00					.byte	$00 ; $42
>f905	00					.byte	$00 ; $43
>f906	00					.byte	$00 ; $44
>f907	00					.byte	$00 ; $45
>f908	00					.byte	$00 ; $46
>f909	00					.byte	$00 ; $47
>f90a	00					.byte	$00 ; $48
>f90b	00					.byte	$00 ; $49
>f90c	00					.byte	$00 ; $4a
>f90d	00					.byte	$00 ; $4b
>f90e	00					.byte	$00 ; $4c
>f90f	00					.byte	$00 ; $4d
>f910	00					.byte	$00 ; $4e
>f911	00					.byte	$00 ; $4f
>f912	00					.byte	$00 ; $50
>f913	00					.byte	$00 ; $51
>f914	00					.byte	$00 ; $52
>f915	00					.byte	$00 ; $53
>f916	00					.byte	$00 ; $54
>f917	00					.byte	$00 ; $55
>f918	00					.byte	$00 ; $56 \\
>f919	00					.byte	$00 ; $57
>f91a	00					.byte	$00 ; $58
>f91b	00					.byte	$00 ; $59
>f91c	00					.byte	$00 ; $5a
>f91d	00					.byte	$00 ; $5b
>f91e	00					.byte	$00 ; $5c
>f91f	00					.byte	$00 ; $5d
>f920	00					.byte	$00 ; $5e
>f921	00					.byte	$00 ; $5f
>f922	00					.byte	$00 ; $60
>f923	00					.byte	$00 ; $61
>f924	00					.byte	$00 ; $62
>f925	00					.byte	$00 ; $63
>f926	00					.byte	$00 ; $64
>f927	00					.byte	$00 ; $65
>f928	00					.byte	$00 ; $66
>f929	00					.byte	$00 ; $67
>f92a	00					.byte	$00 ; $68
>f92b	00					.byte	$00 ; $69
>f92c	00					.byte	$00 ; $6a
>f92d	00					.byte	$00 ; $6b
>f92e	00					.byte	$00 ; $6c
>f92f	00					.byte	$00 ; $6d
>f930	00					.byte	$00 ; $6e
>f931	00					.byte	$00 ; $6f
>f932	00					.byte	$00 ; $70
>f933	00					.byte	$00 ; $71
>f934	00					.byte	$00 ; $72
>f935	00					.byte	$00 ; $73
>f936	00					.byte	$00 ; $74
>f937	00					.byte	$00 ; $75
>f938	00					.byte	$00 ; $76
>f939	00					.byte	$00 ; $77
>f93a	00					.byte	$00 ; $78
>f93b	00					.byte	$00 ; $79
>f93c	00					.byte	$00 ; $7a
>f93d	00					.byte	$00 ; $7b
>f93e	00					.byte	$00 ; $7c
>f93f	00					.byte	$00 ; $7d
>f940	00					.byte	$00 ; $7e
>f941	00					.byte	$00 ; $7f
>f942	00					.byte	$00 ; $80
>f943	00					.byte	$00 ; $81
>f944	00					.byte	$00 ; $82
>f945	00					.byte	$00 ; $83
>f946	00					.byte	$00 ; $84
>f947	00					.byte	$00 ; $85
>f948	00					.byte	$00 ; $86
>f949	00					.byte	$00 ; $87
>f94a	00					.byte	$00 ; $88
>f94b	00					.byte	$00 ; $89
>f94c	00					.byte	$00 ; $8a
>f94d	00					.byte	$00 ; $8b
>f94e	00					.byte	$00 ; $8c
>f94f	00					.byte	$00 ; $8d
>f950	00					.byte	$00 ; $8e
>f951	00					.byte	$00 ; $8f
>f952	ff					.byte	$FF
.f953					ShiftFixTable:
>f953	31					.byte	$31 ; "1"
>f954	21					.byte	$21 ; "!"
>f955	32					.byte	$32 ; "2"
>f956	40					.byte	$40 ; "@"
>f957	33					.byte	$33 ; "3"
>f958	23					.byte	$23 ; "#"
>f959	34					.byte	$34 ; "4"
>f95a	24					.byte	$24 ; "$"
>f95b	35					.byte	$35 ; "5"
>f95c	25					.byte	$25 ; "%"
>f95d	36					.byte	$36 ; "6"
>f95e	5e					.byte	$5e ; "^"
>f95f	37					.byte	$37 ; "7"
>f960	26					.byte	$26 ; "&"
>f961	38					.byte	$38 ; "8"
>f962	2a					.byte	$2a ; "*"
>f963	39					.byte	$39 ; "9"
>f964	28					.byte	$28 ; "("
>f965	30					.byte	$30 ; "0"
>f966	29					.byte	$29 ; ")"
>f967	2d					.byte	$2d ; "-"
>f968	5f					.byte	$5f ; "_"
>f969	3d					.byte	$3d ; "="
>f96a	2b					.byte	$2b ; "+"
>f96b	3b					.byte	$3b ; ";"
>f96c	3a					.byte	$3a ; ":"
>f96d	27					.byte	$27 ; "'"
>f96e	22					.byte	$22 ; """
>f96f	2c					.byte	$2c ; ","
>f970	3c					.byte	$3c ; "<"
>f971	2e					.byte	$2e ; "."
>f972	3e					.byte	$3e ; ">"
>f973	2f					.byte	$2f ; "/"
>f974	3f					.byte	$3f ; "?"
>f975	ff					.byte	$FF

;******  Return to file: newmonitor.asm

.ffcf	4c 1f f2	jmp $f21f		jmp 	FakeKeyboardRead
.ffd2	4c ca f0	jmp $f0ca		jmp 	PrintCharacter
.ffe1	4c 90 f1	jmp $f190		jmp 	ControlCCheck
.ffe4	4c 2a f2	jmp $f22a		jmp 	GetKeyIfPressed
>fffa	46 f1					.word 	NMIHandler                       	; nmi ($FFFA)
>fffc	33 f2					.word 	SystemReset                         ; reset ($FFFC)
>fffe	79 f4					.word 	IRQHandler                          ; irq ($FFFE)

;******  End of listing
